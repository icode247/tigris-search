// package: tigrisdata.auth.v1
// file: server/v1/auth.proto

/* tslint:disable */
/* eslint-disable */

import * as jspb from "google-protobuf";
import * as openapiv3_annotations_pb from "../../openapiv3/annotations_pb";

export class GetAccessTokenRequest extends jspb.Message { 
    getGrantType(): GrantType;
    setGrantType(value: GrantType): GetAccessTokenRequest;
    getRefreshToken(): string;
    setRefreshToken(value: string): GetAccessTokenRequest;
    getClientId(): string;
    setClientId(value: string): GetAccessTokenRequest;
    getClientSecret(): string;
    setClientSecret(value: string): GetAccessTokenRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetAccessTokenRequest.AsObject;
    static toObject(includeInstance: boolean, msg: GetAccessTokenRequest): GetAccessTokenRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetAccessTokenRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetAccessTokenRequest;
    static deserializeBinaryFromReader(message: GetAccessTokenRequest, reader: jspb.BinaryReader): GetAccessTokenRequest;
}

export namespace GetAccessTokenRequest {
    export type AsObject = {
        grantType: GrantType,
        refreshToken: string,
        clientId: string,
        clientSecret: string,
    }
}

export class GetAccessTokenResponse extends jspb.Message { 
    getAccessToken(): string;
    setAccessToken(value: string): GetAccessTokenResponse;
    getRefreshToken(): string;
    setRefreshToken(value: string): GetAccessTokenResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetAccessTokenResponse.AsObject;
    static toObject(includeInstance: boolean, msg: GetAccessTokenResponse): GetAccessTokenResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetAccessTokenResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetAccessTokenResponse;
    static deserializeBinaryFromReader(message: GetAccessTokenResponse, reader: jspb.BinaryReader): GetAccessTokenResponse;
}

export namespace GetAccessTokenResponse {
    export type AsObject = {
        accessToken: string,
        refreshToken: string,
    }
}

export class CreateApplicationRequest extends jspb.Message { 
    getName(): string;
    setName(value: string): CreateApplicationRequest;
    getDescription(): string;
    setDescription(value: string): CreateApplicationRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateApplicationRequest.AsObject;
    static toObject(includeInstance: boolean, msg: CreateApplicationRequest): CreateApplicationRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateApplicationRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateApplicationRequest;
    static deserializeBinaryFromReader(message: CreateApplicationRequest, reader: jspb.BinaryReader): CreateApplicationRequest;
}

export namespace CreateApplicationRequest {
    export type AsObject = {
        name: string,
        description: string,
    }
}

export class CreateApplicationResponse extends jspb.Message { 

    hasCreatedApplication(): boolean;
    clearCreatedApplication(): void;
    getCreatedApplication(): Application | undefined;
    setCreatedApplication(value?: Application): CreateApplicationResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateApplicationResponse.AsObject;
    static toObject(includeInstance: boolean, msg: CreateApplicationResponse): CreateApplicationResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateApplicationResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateApplicationResponse;
    static deserializeBinaryFromReader(message: CreateApplicationResponse, reader: jspb.BinaryReader): CreateApplicationResponse;
}

export namespace CreateApplicationResponse {
    export type AsObject = {
        createdApplication?: Application.AsObject,
    }
}

export class Application extends jspb.Message { 
    getId(): string;
    setId(value: string): Application;
    getName(): string;
    setName(value: string): Application;
    getDescription(): string;
    setDescription(value: string): Application;
    getSecret(): string;
    setSecret(value: string): Application;
    getCreatedAt(): number;
    setCreatedAt(value: number): Application;
    getCreatedBy(): string;
    setCreatedBy(value: string): Application;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Application.AsObject;
    static toObject(includeInstance: boolean, msg: Application): Application.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Application, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Application;
    static deserializeBinaryFromReader(message: Application, reader: jspb.BinaryReader): Application;
}

export namespace Application {
    export type AsObject = {
        id: string,
        name: string,
        description: string,
        secret: string,
        createdAt: number,
        createdBy: string,
    }
}

export class ListApplicationsRequest extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListApplicationsRequest.AsObject;
    static toObject(includeInstance: boolean, msg: ListApplicationsRequest): ListApplicationsRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListApplicationsRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListApplicationsRequest;
    static deserializeBinaryFromReader(message: ListApplicationsRequest, reader: jspb.BinaryReader): ListApplicationsRequest;
}

export namespace ListApplicationsRequest {
    export type AsObject = {
    }
}

export class ListApplicationsResponse extends jspb.Message { 
    clearApplicationsList(): void;
    getApplicationsList(): Array<Application>;
    setApplicationsList(value: Array<Application>): ListApplicationsResponse;
    addApplications(value?: Application, index?: number): Application;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListApplicationsResponse.AsObject;
    static toObject(includeInstance: boolean, msg: ListApplicationsResponse): ListApplicationsResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListApplicationsResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListApplicationsResponse;
    static deserializeBinaryFromReader(message: ListApplicationsResponse, reader: jspb.BinaryReader): ListApplicationsResponse;
}

export namespace ListApplicationsResponse {
    export type AsObject = {
        applicationsList: Array<Application.AsObject>,
    }
}

export class DeleteApplicationsRequest extends jspb.Message { 
    getId(): string;
    setId(value: string): DeleteApplicationsRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteApplicationsRequest.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteApplicationsRequest): DeleteApplicationsRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteApplicationsRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteApplicationsRequest;
    static deserializeBinaryFromReader(message: DeleteApplicationsRequest, reader: jspb.BinaryReader): DeleteApplicationsRequest;
}

export namespace DeleteApplicationsRequest {
    export type AsObject = {
        id: string,
    }
}

export class DeleteApplicationResponse extends jspb.Message { 
    getDeleted(): boolean;
    setDeleted(value: boolean): DeleteApplicationResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteApplicationResponse.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteApplicationResponse): DeleteApplicationResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteApplicationResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteApplicationResponse;
    static deserializeBinaryFromReader(message: DeleteApplicationResponse, reader: jspb.BinaryReader): DeleteApplicationResponse;
}

export namespace DeleteApplicationResponse {
    export type AsObject = {
        deleted: boolean,
    }
}

export class RotateApplicationSecretRequest extends jspb.Message { 
    getId(): string;
    setId(value: string): RotateApplicationSecretRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): RotateApplicationSecretRequest.AsObject;
    static toObject(includeInstance: boolean, msg: RotateApplicationSecretRequest): RotateApplicationSecretRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: RotateApplicationSecretRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): RotateApplicationSecretRequest;
    static deserializeBinaryFromReader(message: RotateApplicationSecretRequest, reader: jspb.BinaryReader): RotateApplicationSecretRequest;
}

export namespace RotateApplicationSecretRequest {
    export type AsObject = {
        id: string,
    }
}

export class RotateApplicationSecretResponse extends jspb.Message { 

    hasApplication(): boolean;
    clearApplication(): void;
    getApplication(): Application | undefined;
    setApplication(value?: Application): RotateApplicationSecretResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): RotateApplicationSecretResponse.AsObject;
    static toObject(includeInstance: boolean, msg: RotateApplicationSecretResponse): RotateApplicationSecretResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: RotateApplicationSecretResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): RotateApplicationSecretResponse;
    static deserializeBinaryFromReader(message: RotateApplicationSecretResponse, reader: jspb.BinaryReader): RotateApplicationSecretResponse;
}

export namespace RotateApplicationSecretResponse {
    export type AsObject = {
        application?: Application.AsObject,
    }
}

export enum GrantType {
    REFRESH_TOKEN = 0,
    CLIENT_CREDENTIALS = 1,
}

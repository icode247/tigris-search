import { TigrisClient } from "./proto/server/v1/api_grpc_pb";
import { Session } from "./session";
import { DeleteRequestOptions, DeleteResponse, EventsRequestOptions, InsertOptions, InsertOrReplaceOptions, LogicalFilter, ReadFields, ReadRequestOptions, Selector, SelectorFilter, SimpleUpdateField, StreamEvent, TigrisCollectionType, UpdateFields, UpdateRequestOptions, UpdateResponse } from "./types";
import { SearchRequest, SearchRequestOptions, SearchResult } from "./search/types";
export interface ReaderCallback<T> {
    onNext(doc: T): void;
    onEnd(): void;
    onError(error: Error): void;
}
export interface SearchResultCallback<T> {
    onNext(result: SearchResult<T>): void;
    onEnd(): void;
    onError(error: Error): void;
}
export interface EventsCallback<T> {
    onNext(event: StreamEvent<T>): void;
    onEnd(): void;
    onError(error: Error): void;
}
export declare class Collection<T extends TigrisCollectionType> {
    private readonly _collectionName;
    private readonly _db;
    private readonly _grpcClient;
    constructor(collectionName: string, db: string, grpcClient: TigrisClient);
    get collectionName(): string;
    insertMany(docs: Array<T>, tx?: Session, _options?: InsertOptions): Promise<Array<T>>;
    insert(doc: T, tx?: Session, options?: InsertOptions): Promise<T>;
    insertOrReplaceMany(docs: Array<T>, tx?: Session, options?: InsertOrReplaceOptions): Promise<Array<T>>;
    insertOrReplace(doc: T, tx?: Session, options?: InsertOptions): Promise<T>;
    findOne(filter: SelectorFilter<T> | LogicalFilter<T> | Selector<T>, tx?: Session, readFields?: ReadFields): Promise<T | undefined>;
    findMany(filter: SelectorFilter<T> | LogicalFilter<T> | Selector<T>, readFields?: ReadFields, tx?: Session, options?: ReadRequestOptions): Promise<Array<T>>;
    findManyStream(filter: SelectorFilter<T> | LogicalFilter<T> | Selector<T>, reader: ReaderCallback<T>, readFields?: ReadFields, tx?: Session, options?: ReadRequestOptions): void;
    findAllStream(reader: ReaderCallback<T>, readFields?: ReadFields): void;
    search(request: SearchRequest<T>, reader: SearchResultCallback<T>, options?: SearchRequestOptions): void;
    delete(filter: SelectorFilter<T> | LogicalFilter<T> | Selector<T>, tx?: Session, _options?: DeleteRequestOptions): Promise<DeleteResponse>;
    update(filter: SelectorFilter<T> | LogicalFilter<T> | Selector<T>, fields: (UpdateFields | SimpleUpdateField), tx?: Session, _options?: UpdateRequestOptions): Promise<UpdateResponse>;
    events(events: EventsCallback<T>, _options?: EventsRequestOptions): void;
}

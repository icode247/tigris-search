// package: tigrisdata.v1
// file: server/v1/api.proto

/* tslint:disable */
/* eslint-disable */

import * as jspb from "google-protobuf";
import * as google_protobuf_timestamp_pb from "google-protobuf/google/protobuf/timestamp_pb";
import * as openapiv3_annotations_pb from "../../openapiv3/annotations_pb";

export class RetryInfo extends jspb.Message { 
    getDelay(): number;
    setDelay(value: number): RetryInfo;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): RetryInfo.AsObject;
    static toObject(includeInstance: boolean, msg: RetryInfo): RetryInfo.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: RetryInfo, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): RetryInfo;
    static deserializeBinaryFromReader(message: RetryInfo, reader: jspb.BinaryReader): RetryInfo;
}

export namespace RetryInfo {
    export type AsObject = {
        delay: number,
    }
}

export class ErrorDetails extends jspb.Message { 
    getCode(): string;
    setCode(value: string): ErrorDetails;
    getMessage(): string;
    setMessage(value: string): ErrorDetails;

    hasRetry(): boolean;
    clearRetry(): void;
    getRetry(): RetryInfo | undefined;
    setRetry(value?: RetryInfo): ErrorDetails;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ErrorDetails.AsObject;
    static toObject(includeInstance: boolean, msg: ErrorDetails): ErrorDetails.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ErrorDetails, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ErrorDetails;
    static deserializeBinaryFromReader(message: ErrorDetails, reader: jspb.BinaryReader): ErrorDetails;
}

export namespace ErrorDetails {
    export type AsObject = {
        code: string,
        message: string,
        retry?: RetryInfo.AsObject,
    }
}

export class Error extends jspb.Message { 
    getCode(): Code;
    setCode(value: Code): Error;
    getMessage(): string;
    setMessage(value: string): Error;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Error.AsObject;
    static toObject(includeInstance: boolean, msg: Error): Error.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Error, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Error;
    static deserializeBinaryFromReader(message: Error, reader: jspb.BinaryReader): Error;
}

export namespace Error {
    export type AsObject = {
        code: Code,
        message: string,
    }
}

export class WriteOptions extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): WriteOptions.AsObject;
    static toObject(includeInstance: boolean, msg: WriteOptions): WriteOptions.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: WriteOptions, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): WriteOptions;
    static deserializeBinaryFromReader(message: WriteOptions, reader: jspb.BinaryReader): WriteOptions;
}

export namespace WriteOptions {
    export type AsObject = {
    }
}

export class ReadRequestOptions extends jspb.Message { 
    getLimit(): number;
    setLimit(value: number): ReadRequestOptions;
    getSkip(): number;
    setSkip(value: number): ReadRequestOptions;
    getOffset(): Uint8Array | string;
    getOffset_asU8(): Uint8Array;
    getOffset_asB64(): string;
    setOffset(value: Uint8Array | string): ReadRequestOptions;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ReadRequestOptions.AsObject;
    static toObject(includeInstance: boolean, msg: ReadRequestOptions): ReadRequestOptions.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ReadRequestOptions, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ReadRequestOptions;
    static deserializeBinaryFromReader(message: ReadRequestOptions, reader: jspb.BinaryReader): ReadRequestOptions;
}

export namespace ReadRequestOptions {
    export type AsObject = {
        limit: number,
        skip: number,
        offset: Uint8Array | string,
    }
}

export class DatabaseOptions extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DatabaseOptions.AsObject;
    static toObject(includeInstance: boolean, msg: DatabaseOptions): DatabaseOptions.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DatabaseOptions, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DatabaseOptions;
    static deserializeBinaryFromReader(message: DatabaseOptions, reader: jspb.BinaryReader): DatabaseOptions;
}

export namespace DatabaseOptions {
    export type AsObject = {
    }
}

export class CollectionOptions extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CollectionOptions.AsObject;
    static toObject(includeInstance: boolean, msg: CollectionOptions): CollectionOptions.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CollectionOptions, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CollectionOptions;
    static deserializeBinaryFromReader(message: CollectionOptions, reader: jspb.BinaryReader): CollectionOptions;
}

export namespace CollectionOptions {
    export type AsObject = {
    }
}

export class TransactionOptions extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): TransactionOptions.AsObject;
    static toObject(includeInstance: boolean, msg: TransactionOptions): TransactionOptions.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: TransactionOptions, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): TransactionOptions;
    static deserializeBinaryFromReader(message: TransactionOptions, reader: jspb.BinaryReader): TransactionOptions;
}

export namespace TransactionOptions {
    export type AsObject = {
    }
}

export class TransactionCtx extends jspb.Message { 
    getId(): string;
    setId(value: string): TransactionCtx;
    getOrigin(): string;
    setOrigin(value: string): TransactionCtx;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): TransactionCtx.AsObject;
    static toObject(includeInstance: boolean, msg: TransactionCtx): TransactionCtx.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: TransactionCtx, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): TransactionCtx;
    static deserializeBinaryFromReader(message: TransactionCtx, reader: jspb.BinaryReader): TransactionCtx;
}

export namespace TransactionCtx {
    export type AsObject = {
        id: string,
        origin: string,
    }
}

export class BeginTransactionRequest extends jspb.Message { 
    getDb(): string;
    setDb(value: string): BeginTransactionRequest;

    hasOptions(): boolean;
    clearOptions(): void;
    getOptions(): TransactionOptions | undefined;
    setOptions(value?: TransactionOptions): BeginTransactionRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): BeginTransactionRequest.AsObject;
    static toObject(includeInstance: boolean, msg: BeginTransactionRequest): BeginTransactionRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: BeginTransactionRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): BeginTransactionRequest;
    static deserializeBinaryFromReader(message: BeginTransactionRequest, reader: jspb.BinaryReader): BeginTransactionRequest;
}

export namespace BeginTransactionRequest {
    export type AsObject = {
        db: string,
        options?: TransactionOptions.AsObject,
    }
}

export class BeginTransactionResponse extends jspb.Message { 

    hasTxCtx(): boolean;
    clearTxCtx(): void;
    getTxCtx(): TransactionCtx | undefined;
    setTxCtx(value?: TransactionCtx): BeginTransactionResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): BeginTransactionResponse.AsObject;
    static toObject(includeInstance: boolean, msg: BeginTransactionResponse): BeginTransactionResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: BeginTransactionResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): BeginTransactionResponse;
    static deserializeBinaryFromReader(message: BeginTransactionResponse, reader: jspb.BinaryReader): BeginTransactionResponse;
}

export namespace BeginTransactionResponse {
    export type AsObject = {
        txCtx?: TransactionCtx.AsObject,
    }
}

export class CommitTransactionRequest extends jspb.Message { 
    getDb(): string;
    setDb(value: string): CommitTransactionRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CommitTransactionRequest.AsObject;
    static toObject(includeInstance: boolean, msg: CommitTransactionRequest): CommitTransactionRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CommitTransactionRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CommitTransactionRequest;
    static deserializeBinaryFromReader(message: CommitTransactionRequest, reader: jspb.BinaryReader): CommitTransactionRequest;
}

export namespace CommitTransactionRequest {
    export type AsObject = {
        db: string,
    }
}

export class CommitTransactionResponse extends jspb.Message { 
    getStatus(): string;
    setStatus(value: string): CommitTransactionResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CommitTransactionResponse.AsObject;
    static toObject(includeInstance: boolean, msg: CommitTransactionResponse): CommitTransactionResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CommitTransactionResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CommitTransactionResponse;
    static deserializeBinaryFromReader(message: CommitTransactionResponse, reader: jspb.BinaryReader): CommitTransactionResponse;
}

export namespace CommitTransactionResponse {
    export type AsObject = {
        status: string,
    }
}

export class RollbackTransactionRequest extends jspb.Message { 
    getDb(): string;
    setDb(value: string): RollbackTransactionRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): RollbackTransactionRequest.AsObject;
    static toObject(includeInstance: boolean, msg: RollbackTransactionRequest): RollbackTransactionRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: RollbackTransactionRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): RollbackTransactionRequest;
    static deserializeBinaryFromReader(message: RollbackTransactionRequest, reader: jspb.BinaryReader): RollbackTransactionRequest;
}

export namespace RollbackTransactionRequest {
    export type AsObject = {
        db: string,
    }
}

export class RollbackTransactionResponse extends jspb.Message { 
    getStatus(): string;
    setStatus(value: string): RollbackTransactionResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): RollbackTransactionResponse.AsObject;
    static toObject(includeInstance: boolean, msg: RollbackTransactionResponse): RollbackTransactionResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: RollbackTransactionResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): RollbackTransactionResponse;
    static deserializeBinaryFromReader(message: RollbackTransactionResponse, reader: jspb.BinaryReader): RollbackTransactionResponse;
}

export namespace RollbackTransactionResponse {
    export type AsObject = {
        status: string,
    }
}

export class InsertRequestOptions extends jspb.Message { 

    hasWriteOptions(): boolean;
    clearWriteOptions(): void;
    getWriteOptions(): WriteOptions | undefined;
    setWriteOptions(value?: WriteOptions): InsertRequestOptions;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): InsertRequestOptions.AsObject;
    static toObject(includeInstance: boolean, msg: InsertRequestOptions): InsertRequestOptions.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: InsertRequestOptions, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): InsertRequestOptions;
    static deserializeBinaryFromReader(message: InsertRequestOptions, reader: jspb.BinaryReader): InsertRequestOptions;
}

export namespace InsertRequestOptions {
    export type AsObject = {
        writeOptions?: WriteOptions.AsObject,
    }
}

export class ResponseMetadata extends jspb.Message { 

    hasCreatedAt(): boolean;
    clearCreatedAt(): void;
    getCreatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
    setCreatedAt(value?: google_protobuf_timestamp_pb.Timestamp): ResponseMetadata;

    hasUpdatedAt(): boolean;
    clearUpdatedAt(): void;
    getUpdatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
    setUpdatedAt(value?: google_protobuf_timestamp_pb.Timestamp): ResponseMetadata;

    hasDeletedAt(): boolean;
    clearDeletedAt(): void;
    getDeletedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
    setDeletedAt(value?: google_protobuf_timestamp_pb.Timestamp): ResponseMetadata;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ResponseMetadata.AsObject;
    static toObject(includeInstance: boolean, msg: ResponseMetadata): ResponseMetadata.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ResponseMetadata, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ResponseMetadata;
    static deserializeBinaryFromReader(message: ResponseMetadata, reader: jspb.BinaryReader): ResponseMetadata;
}

export namespace ResponseMetadata {
    export type AsObject = {
        createdAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
        updatedAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
        deletedAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    }
}

export class InsertRequest extends jspb.Message { 
    getDb(): string;
    setDb(value: string): InsertRequest;
    getCollection(): string;
    setCollection(value: string): InsertRequest;
    clearDocumentsList(): void;
    getDocumentsList(): Array<Uint8Array | string>;
    getDocumentsList_asU8(): Array<Uint8Array>;
    getDocumentsList_asB64(): Array<string>;
    setDocumentsList(value: Array<Uint8Array | string>): InsertRequest;
    addDocuments(value: Uint8Array | string, index?: number): Uint8Array | string;

    hasOptions(): boolean;
    clearOptions(): void;
    getOptions(): InsertRequestOptions | undefined;
    setOptions(value?: InsertRequestOptions): InsertRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): InsertRequest.AsObject;
    static toObject(includeInstance: boolean, msg: InsertRequest): InsertRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: InsertRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): InsertRequest;
    static deserializeBinaryFromReader(message: InsertRequest, reader: jspb.BinaryReader): InsertRequest;
}

export namespace InsertRequest {
    export type AsObject = {
        db: string,
        collection: string,
        documentsList: Array<Uint8Array | string>,
        options?: InsertRequestOptions.AsObject,
    }
}

export class InsertResponse extends jspb.Message { 

    hasMetadata(): boolean;
    clearMetadata(): void;
    getMetadata(): ResponseMetadata | undefined;
    setMetadata(value?: ResponseMetadata): InsertResponse;
    getStatus(): string;
    setStatus(value: string): InsertResponse;
    clearKeysList(): void;
    getKeysList(): Array<Uint8Array | string>;
    getKeysList_asU8(): Array<Uint8Array>;
    getKeysList_asB64(): Array<string>;
    setKeysList(value: Array<Uint8Array | string>): InsertResponse;
    addKeys(value: Uint8Array | string, index?: number): Uint8Array | string;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): InsertResponse.AsObject;
    static toObject(includeInstance: boolean, msg: InsertResponse): InsertResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: InsertResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): InsertResponse;
    static deserializeBinaryFromReader(message: InsertResponse, reader: jspb.BinaryReader): InsertResponse;
}

export namespace InsertResponse {
    export type AsObject = {
        metadata?: ResponseMetadata.AsObject,
        status: string,
        keysList: Array<Uint8Array | string>,
    }
}

export class ReplaceRequestOptions extends jspb.Message { 

    hasWriteOptions(): boolean;
    clearWriteOptions(): void;
    getWriteOptions(): WriteOptions | undefined;
    setWriteOptions(value?: WriteOptions): ReplaceRequestOptions;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ReplaceRequestOptions.AsObject;
    static toObject(includeInstance: boolean, msg: ReplaceRequestOptions): ReplaceRequestOptions.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ReplaceRequestOptions, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ReplaceRequestOptions;
    static deserializeBinaryFromReader(message: ReplaceRequestOptions, reader: jspb.BinaryReader): ReplaceRequestOptions;
}

export namespace ReplaceRequestOptions {
    export type AsObject = {
        writeOptions?: WriteOptions.AsObject,
    }
}

export class ReplaceRequest extends jspb.Message { 
    getDb(): string;
    setDb(value: string): ReplaceRequest;
    getCollection(): string;
    setCollection(value: string): ReplaceRequest;
    clearDocumentsList(): void;
    getDocumentsList(): Array<Uint8Array | string>;
    getDocumentsList_asU8(): Array<Uint8Array>;
    getDocumentsList_asB64(): Array<string>;
    setDocumentsList(value: Array<Uint8Array | string>): ReplaceRequest;
    addDocuments(value: Uint8Array | string, index?: number): Uint8Array | string;

    hasOptions(): boolean;
    clearOptions(): void;
    getOptions(): ReplaceRequestOptions | undefined;
    setOptions(value?: ReplaceRequestOptions): ReplaceRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ReplaceRequest.AsObject;
    static toObject(includeInstance: boolean, msg: ReplaceRequest): ReplaceRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ReplaceRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ReplaceRequest;
    static deserializeBinaryFromReader(message: ReplaceRequest, reader: jspb.BinaryReader): ReplaceRequest;
}

export namespace ReplaceRequest {
    export type AsObject = {
        db: string,
        collection: string,
        documentsList: Array<Uint8Array | string>,
        options?: ReplaceRequestOptions.AsObject,
    }
}

export class ReplaceResponse extends jspb.Message { 

    hasMetadata(): boolean;
    clearMetadata(): void;
    getMetadata(): ResponseMetadata | undefined;
    setMetadata(value?: ResponseMetadata): ReplaceResponse;
    getStatus(): string;
    setStatus(value: string): ReplaceResponse;
    clearKeysList(): void;
    getKeysList(): Array<Uint8Array | string>;
    getKeysList_asU8(): Array<Uint8Array>;
    getKeysList_asB64(): Array<string>;
    setKeysList(value: Array<Uint8Array | string>): ReplaceResponse;
    addKeys(value: Uint8Array | string, index?: number): Uint8Array | string;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ReplaceResponse.AsObject;
    static toObject(includeInstance: boolean, msg: ReplaceResponse): ReplaceResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ReplaceResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ReplaceResponse;
    static deserializeBinaryFromReader(message: ReplaceResponse, reader: jspb.BinaryReader): ReplaceResponse;
}

export namespace ReplaceResponse {
    export type AsObject = {
        metadata?: ResponseMetadata.AsObject,
        status: string,
        keysList: Array<Uint8Array | string>,
    }
}

export class DeleteRequestOptions extends jspb.Message { 

    hasWriteOptions(): boolean;
    clearWriteOptions(): void;
    getWriteOptions(): WriteOptions | undefined;
    setWriteOptions(value?: WriteOptions): DeleteRequestOptions;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteRequestOptions.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteRequestOptions): DeleteRequestOptions.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteRequestOptions, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteRequestOptions;
    static deserializeBinaryFromReader(message: DeleteRequestOptions, reader: jspb.BinaryReader): DeleteRequestOptions;
}

export namespace DeleteRequestOptions {
    export type AsObject = {
        writeOptions?: WriteOptions.AsObject,
    }
}

export class DeleteRequest extends jspb.Message { 
    getDb(): string;
    setDb(value: string): DeleteRequest;
    getCollection(): string;
    setCollection(value: string): DeleteRequest;
    getFilter(): Uint8Array | string;
    getFilter_asU8(): Uint8Array;
    getFilter_asB64(): string;
    setFilter(value: Uint8Array | string): DeleteRequest;

    hasOptions(): boolean;
    clearOptions(): void;
    getOptions(): DeleteRequestOptions | undefined;
    setOptions(value?: DeleteRequestOptions): DeleteRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteRequest.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteRequest): DeleteRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteRequest;
    static deserializeBinaryFromReader(message: DeleteRequest, reader: jspb.BinaryReader): DeleteRequest;
}

export namespace DeleteRequest {
    export type AsObject = {
        db: string,
        collection: string,
        filter: Uint8Array | string,
        options?: DeleteRequestOptions.AsObject,
    }
}

export class DeleteResponse extends jspb.Message { 

    hasMetadata(): boolean;
    clearMetadata(): void;
    getMetadata(): ResponseMetadata | undefined;
    setMetadata(value?: ResponseMetadata): DeleteResponse;
    getStatus(): string;
    setStatus(value: string): DeleteResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteResponse.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteResponse): DeleteResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteResponse;
    static deserializeBinaryFromReader(message: DeleteResponse, reader: jspb.BinaryReader): DeleteResponse;
}

export namespace DeleteResponse {
    export type AsObject = {
        metadata?: ResponseMetadata.AsObject,
        status: string,
    }
}

export class UpdateRequestOptions extends jspb.Message { 

    hasWriteOptions(): boolean;
    clearWriteOptions(): void;
    getWriteOptions(): WriteOptions | undefined;
    setWriteOptions(value?: WriteOptions): UpdateRequestOptions;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): UpdateRequestOptions.AsObject;
    static toObject(includeInstance: boolean, msg: UpdateRequestOptions): UpdateRequestOptions.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: UpdateRequestOptions, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): UpdateRequestOptions;
    static deserializeBinaryFromReader(message: UpdateRequestOptions, reader: jspb.BinaryReader): UpdateRequestOptions;
}

export namespace UpdateRequestOptions {
    export type AsObject = {
        writeOptions?: WriteOptions.AsObject,
    }
}

export class UpdateRequest extends jspb.Message { 
    getDb(): string;
    setDb(value: string): UpdateRequest;
    getCollection(): string;
    setCollection(value: string): UpdateRequest;
    getFields(): Uint8Array | string;
    getFields_asU8(): Uint8Array;
    getFields_asB64(): string;
    setFields(value: Uint8Array | string): UpdateRequest;
    getFilter(): Uint8Array | string;
    getFilter_asU8(): Uint8Array;
    getFilter_asB64(): string;
    setFilter(value: Uint8Array | string): UpdateRequest;

    hasOptions(): boolean;
    clearOptions(): void;
    getOptions(): UpdateRequestOptions | undefined;
    setOptions(value?: UpdateRequestOptions): UpdateRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): UpdateRequest.AsObject;
    static toObject(includeInstance: boolean, msg: UpdateRequest): UpdateRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: UpdateRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): UpdateRequest;
    static deserializeBinaryFromReader(message: UpdateRequest, reader: jspb.BinaryReader): UpdateRequest;
}

export namespace UpdateRequest {
    export type AsObject = {
        db: string,
        collection: string,
        fields: Uint8Array | string,
        filter: Uint8Array | string,
        options?: UpdateRequestOptions.AsObject,
    }
}

export class UpdateResponse extends jspb.Message { 

    hasMetadata(): boolean;
    clearMetadata(): void;
    getMetadata(): ResponseMetadata | undefined;
    setMetadata(value?: ResponseMetadata): UpdateResponse;
    getModifiedCount(): number;
    setModifiedCount(value: number): UpdateResponse;
    getStatus(): string;
    setStatus(value: string): UpdateResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): UpdateResponse.AsObject;
    static toObject(includeInstance: boolean, msg: UpdateResponse): UpdateResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: UpdateResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): UpdateResponse;
    static deserializeBinaryFromReader(message: UpdateResponse, reader: jspb.BinaryReader): UpdateResponse;
}

export namespace UpdateResponse {
    export type AsObject = {
        metadata?: ResponseMetadata.AsObject,
        modifiedCount: number,
        status: string,
    }
}

export class ReadRequest extends jspb.Message { 
    getDb(): string;
    setDb(value: string): ReadRequest;
    getCollection(): string;
    setCollection(value: string): ReadRequest;
    getFilter(): Uint8Array | string;
    getFilter_asU8(): Uint8Array;
    getFilter_asB64(): string;
    setFilter(value: Uint8Array | string): ReadRequest;
    getFields(): Uint8Array | string;
    getFields_asU8(): Uint8Array;
    getFields_asB64(): string;
    setFields(value: Uint8Array | string): ReadRequest;

    hasOptions(): boolean;
    clearOptions(): void;
    getOptions(): ReadRequestOptions | undefined;
    setOptions(value?: ReadRequestOptions): ReadRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ReadRequest.AsObject;
    static toObject(includeInstance: boolean, msg: ReadRequest): ReadRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ReadRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ReadRequest;
    static deserializeBinaryFromReader(message: ReadRequest, reader: jspb.BinaryReader): ReadRequest;
}

export namespace ReadRequest {
    export type AsObject = {
        db: string,
        collection: string,
        filter: Uint8Array | string,
        fields: Uint8Array | string,
        options?: ReadRequestOptions.AsObject,
    }
}

export class ReadResponse extends jspb.Message { 
    getData(): Uint8Array | string;
    getData_asU8(): Uint8Array;
    getData_asB64(): string;
    setData(value: Uint8Array | string): ReadResponse;
    getResumeToken(): Uint8Array | string;
    getResumeToken_asU8(): Uint8Array;
    getResumeToken_asB64(): string;
    setResumeToken(value: Uint8Array | string): ReadResponse;

    hasMetadata(): boolean;
    clearMetadata(): void;
    getMetadata(): ResponseMetadata | undefined;
    setMetadata(value?: ResponseMetadata): ReadResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ReadResponse.AsObject;
    static toObject(includeInstance: boolean, msg: ReadResponse): ReadResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ReadResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ReadResponse;
    static deserializeBinaryFromReader(message: ReadResponse, reader: jspb.BinaryReader): ReadResponse;
}

export namespace ReadResponse {
    export type AsObject = {
        data: Uint8Array | string,
        resumeToken: Uint8Array | string,
        metadata?: ResponseMetadata.AsObject,
    }
}

export class SearchRequest extends jspb.Message { 
    getDb(): string;
    setDb(value: string): SearchRequest;
    getCollection(): string;
    setCollection(value: string): SearchRequest;
    getQ(): string;
    setQ(value: string): SearchRequest;
    clearSearchFieldsList(): void;
    getSearchFieldsList(): Array<string>;
    setSearchFieldsList(value: Array<string>): SearchRequest;
    addSearchFields(value: string, index?: number): string;
    getFilter(): Uint8Array | string;
    getFilter_asU8(): Uint8Array;
    getFilter_asB64(): string;
    setFilter(value: Uint8Array | string): SearchRequest;
    getFacet(): Uint8Array | string;
    getFacet_asU8(): Uint8Array;
    getFacet_asB64(): string;
    setFacet(value: Uint8Array | string): SearchRequest;
    getSort(): Uint8Array | string;
    getSort_asU8(): Uint8Array;
    getSort_asB64(): string;
    setSort(value: Uint8Array | string): SearchRequest;
    clearIncludeFieldsList(): void;
    getIncludeFieldsList(): Array<string>;
    setIncludeFieldsList(value: Array<string>): SearchRequest;
    addIncludeFields(value: string, index?: number): string;
    clearExcludeFieldsList(): void;
    getExcludeFieldsList(): Array<string>;
    setExcludeFieldsList(value: Array<string>): SearchRequest;
    addExcludeFields(value: string, index?: number): string;
    getPageSize(): number;
    setPageSize(value: number): SearchRequest;
    getPage(): number;
    setPage(value: number): SearchRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SearchRequest.AsObject;
    static toObject(includeInstance: boolean, msg: SearchRequest): SearchRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SearchRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SearchRequest;
    static deserializeBinaryFromReader(message: SearchRequest, reader: jspb.BinaryReader): SearchRequest;
}

export namespace SearchRequest {
    export type AsObject = {
        db: string,
        collection: string,
        q: string,
        searchFieldsList: Array<string>,
        filter: Uint8Array | string,
        facet: Uint8Array | string,
        sort: Uint8Array | string,
        includeFieldsList: Array<string>,
        excludeFieldsList: Array<string>,
        pageSize: number,
        page: number,
    }
}

export class SearchResponse extends jspb.Message { 
    clearHitsList(): void;
    getHitsList(): Array<SearchHit>;
    setHitsList(value: Array<SearchHit>): SearchResponse;
    addHits(value?: SearchHit, index?: number): SearchHit;

    getFacetsMap(): jspb.Map<string, SearchFacet>;
    clearFacetsMap(): void;

    hasMeta(): boolean;
    clearMeta(): void;
    getMeta(): SearchMetadata | undefined;
    setMeta(value?: SearchMetadata): SearchResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SearchResponse.AsObject;
    static toObject(includeInstance: boolean, msg: SearchResponse): SearchResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SearchResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SearchResponse;
    static deserializeBinaryFromReader(message: SearchResponse, reader: jspb.BinaryReader): SearchResponse;
}

export namespace SearchResponse {
    export type AsObject = {
        hitsList: Array<SearchHit.AsObject>,

        facetsMap: Array<[string, SearchFacet.AsObject]>,
        meta?: SearchMetadata.AsObject,
    }
}

export class SearchHit extends jspb.Message { 
    getData(): Uint8Array | string;
    getData_asU8(): Uint8Array;
    getData_asB64(): string;
    setData(value: Uint8Array | string): SearchHit;

    hasMetadata(): boolean;
    clearMetadata(): void;
    getMetadata(): SearchHitMeta | undefined;
    setMetadata(value?: SearchHitMeta): SearchHit;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SearchHit.AsObject;
    static toObject(includeInstance: boolean, msg: SearchHit): SearchHit.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SearchHit, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SearchHit;
    static deserializeBinaryFromReader(message: SearchHit, reader: jspb.BinaryReader): SearchHit;
}

export namespace SearchHit {
    export type AsObject = {
        data: Uint8Array | string,
        metadata?: SearchHitMeta.AsObject,
    }
}

export class SearchHitMeta extends jspb.Message { 

    hasCreatedAt(): boolean;
    clearCreatedAt(): void;
    getCreatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
    setCreatedAt(value?: google_protobuf_timestamp_pb.Timestamp): SearchHitMeta;

    hasUpdatedAt(): boolean;
    clearUpdatedAt(): void;
    getUpdatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
    setUpdatedAt(value?: google_protobuf_timestamp_pb.Timestamp): SearchHitMeta;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SearchHitMeta.AsObject;
    static toObject(includeInstance: boolean, msg: SearchHitMeta): SearchHitMeta.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SearchHitMeta, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SearchHitMeta;
    static deserializeBinaryFromReader(message: SearchHitMeta, reader: jspb.BinaryReader): SearchHitMeta;
}

export namespace SearchHitMeta {
    export type AsObject = {
        createdAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
        updatedAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    }
}

export class SearchFacet extends jspb.Message { 
    clearCountsList(): void;
    getCountsList(): Array<FacetCount>;
    setCountsList(value: Array<FacetCount>): SearchFacet;
    addCounts(value?: FacetCount, index?: number): FacetCount;

    hasStats(): boolean;
    clearStats(): void;
    getStats(): FacetStats | undefined;
    setStats(value?: FacetStats): SearchFacet;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SearchFacet.AsObject;
    static toObject(includeInstance: boolean, msg: SearchFacet): SearchFacet.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SearchFacet, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SearchFacet;
    static deserializeBinaryFromReader(message: SearchFacet, reader: jspb.BinaryReader): SearchFacet;
}

export namespace SearchFacet {
    export type AsObject = {
        countsList: Array<FacetCount.AsObject>,
        stats?: FacetStats.AsObject,
    }
}

export class FacetCount extends jspb.Message { 
    getCount(): number;
    setCount(value: number): FacetCount;
    getValue(): string;
    setValue(value: string): FacetCount;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): FacetCount.AsObject;
    static toObject(includeInstance: boolean, msg: FacetCount): FacetCount.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: FacetCount, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): FacetCount;
    static deserializeBinaryFromReader(message: FacetCount, reader: jspb.BinaryReader): FacetCount;
}

export namespace FacetCount {
    export type AsObject = {
        count: number,
        value: string,
    }
}

export class FacetStats extends jspb.Message { 

    hasAvg(): boolean;
    clearAvg(): void;
    getAvg(): number | undefined;
    setAvg(value: number): FacetStats;

    hasMax(): boolean;
    clearMax(): void;
    getMax(): number | undefined;
    setMax(value: number): FacetStats;

    hasMin(): boolean;
    clearMin(): void;
    getMin(): number | undefined;
    setMin(value: number): FacetStats;

    hasSum(): boolean;
    clearSum(): void;
    getSum(): number | undefined;
    setSum(value: number): FacetStats;
    getCount(): number;
    setCount(value: number): FacetStats;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): FacetStats.AsObject;
    static toObject(includeInstance: boolean, msg: FacetStats): FacetStats.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: FacetStats, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): FacetStats;
    static deserializeBinaryFromReader(message: FacetStats, reader: jspb.BinaryReader): FacetStats;
}

export namespace FacetStats {
    export type AsObject = {
        avg?: number,
        max?: number,
        min?: number,
        sum?: number,
        count: number,
    }
}

export class SearchMetadata extends jspb.Message { 
    getFound(): number;
    setFound(value: number): SearchMetadata;
    getTotalPages(): number;
    setTotalPages(value: number): SearchMetadata;

    hasPage(): boolean;
    clearPage(): void;
    getPage(): Page | undefined;
    setPage(value?: Page): SearchMetadata;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SearchMetadata.AsObject;
    static toObject(includeInstance: boolean, msg: SearchMetadata): SearchMetadata.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SearchMetadata, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SearchMetadata;
    static deserializeBinaryFromReader(message: SearchMetadata, reader: jspb.BinaryReader): SearchMetadata;
}

export namespace SearchMetadata {
    export type AsObject = {
        found: number,
        totalPages: number,
        page?: Page.AsObject,
    }
}

export class Page extends jspb.Message { 
    getCurrent(): number;
    setCurrent(value: number): Page;
    getSize(): number;
    setSize(value: number): Page;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Page.AsObject;
    static toObject(includeInstance: boolean, msg: Page): Page.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Page, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Page;
    static deserializeBinaryFromReader(message: Page, reader: jspb.BinaryReader): Page;
}

export namespace Page {
    export type AsObject = {
        current: number,
        size: number,
    }
}

export class CreateDatabaseRequest extends jspb.Message { 
    getDb(): string;
    setDb(value: string): CreateDatabaseRequest;

    hasOptions(): boolean;
    clearOptions(): void;
    getOptions(): DatabaseOptions | undefined;
    setOptions(value?: DatabaseOptions): CreateDatabaseRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateDatabaseRequest.AsObject;
    static toObject(includeInstance: boolean, msg: CreateDatabaseRequest): CreateDatabaseRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateDatabaseRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateDatabaseRequest;
    static deserializeBinaryFromReader(message: CreateDatabaseRequest, reader: jspb.BinaryReader): CreateDatabaseRequest;
}

export namespace CreateDatabaseRequest {
    export type AsObject = {
        db: string,
        options?: DatabaseOptions.AsObject,
    }
}

export class CreateDatabaseResponse extends jspb.Message { 
    getMessage(): string;
    setMessage(value: string): CreateDatabaseResponse;
    getStatus(): string;
    setStatus(value: string): CreateDatabaseResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateDatabaseResponse.AsObject;
    static toObject(includeInstance: boolean, msg: CreateDatabaseResponse): CreateDatabaseResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateDatabaseResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateDatabaseResponse;
    static deserializeBinaryFromReader(message: CreateDatabaseResponse, reader: jspb.BinaryReader): CreateDatabaseResponse;
}

export namespace CreateDatabaseResponse {
    export type AsObject = {
        message: string,
        status: string,
    }
}

export class DropDatabaseRequest extends jspb.Message { 
    getDb(): string;
    setDb(value: string): DropDatabaseRequest;

    hasOptions(): boolean;
    clearOptions(): void;
    getOptions(): DatabaseOptions | undefined;
    setOptions(value?: DatabaseOptions): DropDatabaseRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DropDatabaseRequest.AsObject;
    static toObject(includeInstance: boolean, msg: DropDatabaseRequest): DropDatabaseRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DropDatabaseRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DropDatabaseRequest;
    static deserializeBinaryFromReader(message: DropDatabaseRequest, reader: jspb.BinaryReader): DropDatabaseRequest;
}

export namespace DropDatabaseRequest {
    export type AsObject = {
        db: string,
        options?: DatabaseOptions.AsObject,
    }
}

export class DropDatabaseResponse extends jspb.Message { 
    getMessage(): string;
    setMessage(value: string): DropDatabaseResponse;
    getStatus(): string;
    setStatus(value: string): DropDatabaseResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DropDatabaseResponse.AsObject;
    static toObject(includeInstance: boolean, msg: DropDatabaseResponse): DropDatabaseResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DropDatabaseResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DropDatabaseResponse;
    static deserializeBinaryFromReader(message: DropDatabaseResponse, reader: jspb.BinaryReader): DropDatabaseResponse;
}

export namespace DropDatabaseResponse {
    export type AsObject = {
        message: string,
        status: string,
    }
}

export class CreateOrUpdateCollectionRequest extends jspb.Message { 
    getDb(): string;
    setDb(value: string): CreateOrUpdateCollectionRequest;
    getCollection(): string;
    setCollection(value: string): CreateOrUpdateCollectionRequest;
    getSchema(): Uint8Array | string;
    getSchema_asU8(): Uint8Array;
    getSchema_asB64(): string;
    setSchema(value: Uint8Array | string): CreateOrUpdateCollectionRequest;
    getOnlyCreate(): boolean;
    setOnlyCreate(value: boolean): CreateOrUpdateCollectionRequest;

    hasOptions(): boolean;
    clearOptions(): void;
    getOptions(): CollectionOptions | undefined;
    setOptions(value?: CollectionOptions): CreateOrUpdateCollectionRequest;
    getType(): CollectionType;
    setType(value: CollectionType): CreateOrUpdateCollectionRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateOrUpdateCollectionRequest.AsObject;
    static toObject(includeInstance: boolean, msg: CreateOrUpdateCollectionRequest): CreateOrUpdateCollectionRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateOrUpdateCollectionRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateOrUpdateCollectionRequest;
    static deserializeBinaryFromReader(message: CreateOrUpdateCollectionRequest, reader: jspb.BinaryReader): CreateOrUpdateCollectionRequest;
}

export namespace CreateOrUpdateCollectionRequest {
    export type AsObject = {
        db: string,
        collection: string,
        schema: Uint8Array | string,
        onlyCreate: boolean,
        options?: CollectionOptions.AsObject,
        type: CollectionType,
    }
}

export class CreateOrUpdateCollectionResponse extends jspb.Message { 
    getMessage(): string;
    setMessage(value: string): CreateOrUpdateCollectionResponse;
    getStatus(): string;
    setStatus(value: string): CreateOrUpdateCollectionResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateOrUpdateCollectionResponse.AsObject;
    static toObject(includeInstance: boolean, msg: CreateOrUpdateCollectionResponse): CreateOrUpdateCollectionResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateOrUpdateCollectionResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateOrUpdateCollectionResponse;
    static deserializeBinaryFromReader(message: CreateOrUpdateCollectionResponse, reader: jspb.BinaryReader): CreateOrUpdateCollectionResponse;
}

export namespace CreateOrUpdateCollectionResponse {
    export type AsObject = {
        message: string,
        status: string,
    }
}

export class DropCollectionRequest extends jspb.Message { 
    getDb(): string;
    setDb(value: string): DropCollectionRequest;
    getCollection(): string;
    setCollection(value: string): DropCollectionRequest;

    hasOptions(): boolean;
    clearOptions(): void;
    getOptions(): CollectionOptions | undefined;
    setOptions(value?: CollectionOptions): DropCollectionRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DropCollectionRequest.AsObject;
    static toObject(includeInstance: boolean, msg: DropCollectionRequest): DropCollectionRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DropCollectionRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DropCollectionRequest;
    static deserializeBinaryFromReader(message: DropCollectionRequest, reader: jspb.BinaryReader): DropCollectionRequest;
}

export namespace DropCollectionRequest {
    export type AsObject = {
        db: string,
        collection: string,
        options?: CollectionOptions.AsObject,
    }
}

export class DropCollectionResponse extends jspb.Message { 
    getMessage(): string;
    setMessage(value: string): DropCollectionResponse;
    getStatus(): string;
    setStatus(value: string): DropCollectionResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DropCollectionResponse.AsObject;
    static toObject(includeInstance: boolean, msg: DropCollectionResponse): DropCollectionResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DropCollectionResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DropCollectionResponse;
    static deserializeBinaryFromReader(message: DropCollectionResponse, reader: jspb.BinaryReader): DropCollectionResponse;
}

export namespace DropCollectionResponse {
    export type AsObject = {
        message: string,
        status: string,
    }
}

export class DatabaseInfo extends jspb.Message { 
    getDb(): string;
    setDb(value: string): DatabaseInfo;

    hasMetadata(): boolean;
    clearMetadata(): void;
    getMetadata(): DatabaseMetadata | undefined;
    setMetadata(value?: DatabaseMetadata): DatabaseInfo;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DatabaseInfo.AsObject;
    static toObject(includeInstance: boolean, msg: DatabaseInfo): DatabaseInfo.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DatabaseInfo, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DatabaseInfo;
    static deserializeBinaryFromReader(message: DatabaseInfo, reader: jspb.BinaryReader): DatabaseInfo;
}

export namespace DatabaseInfo {
    export type AsObject = {
        db: string,
        metadata?: DatabaseMetadata.AsObject,
    }
}

export class CollectionInfo extends jspb.Message { 
    getCollection(): string;
    setCollection(value: string): CollectionInfo;

    hasMetadata(): boolean;
    clearMetadata(): void;
    getMetadata(): CollectionMetadata | undefined;
    setMetadata(value?: CollectionMetadata): CollectionInfo;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CollectionInfo.AsObject;
    static toObject(includeInstance: boolean, msg: CollectionInfo): CollectionInfo.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CollectionInfo, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CollectionInfo;
    static deserializeBinaryFromReader(message: CollectionInfo, reader: jspb.BinaryReader): CollectionInfo;
}

export namespace CollectionInfo {
    export type AsObject = {
        collection: string,
        metadata?: CollectionMetadata.AsObject,
    }
}

export class ListDatabasesRequest extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListDatabasesRequest.AsObject;
    static toObject(includeInstance: boolean, msg: ListDatabasesRequest): ListDatabasesRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListDatabasesRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListDatabasesRequest;
    static deserializeBinaryFromReader(message: ListDatabasesRequest, reader: jspb.BinaryReader): ListDatabasesRequest;
}

export namespace ListDatabasesRequest {
    export type AsObject = {
    }
}

export class ListDatabasesResponse extends jspb.Message { 
    clearDatabasesList(): void;
    getDatabasesList(): Array<DatabaseInfo>;
    setDatabasesList(value: Array<DatabaseInfo>): ListDatabasesResponse;
    addDatabases(value?: DatabaseInfo, index?: number): DatabaseInfo;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListDatabasesResponse.AsObject;
    static toObject(includeInstance: boolean, msg: ListDatabasesResponse): ListDatabasesResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListDatabasesResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListDatabasesResponse;
    static deserializeBinaryFromReader(message: ListDatabasesResponse, reader: jspb.BinaryReader): ListDatabasesResponse;
}

export namespace ListDatabasesResponse {
    export type AsObject = {
        databasesList: Array<DatabaseInfo.AsObject>,
    }
}

export class ListCollectionsRequest extends jspb.Message { 
    getDb(): string;
    setDb(value: string): ListCollectionsRequest;

    hasOptions(): boolean;
    clearOptions(): void;
    getOptions(): CollectionOptions | undefined;
    setOptions(value?: CollectionOptions): ListCollectionsRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListCollectionsRequest.AsObject;
    static toObject(includeInstance: boolean, msg: ListCollectionsRequest): ListCollectionsRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListCollectionsRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListCollectionsRequest;
    static deserializeBinaryFromReader(message: ListCollectionsRequest, reader: jspb.BinaryReader): ListCollectionsRequest;
}

export namespace ListCollectionsRequest {
    export type AsObject = {
        db: string,
        options?: CollectionOptions.AsObject,
    }
}

export class ListCollectionsResponse extends jspb.Message { 
    getDb(): string;
    setDb(value: string): ListCollectionsResponse;
    clearCollectionsList(): void;
    getCollectionsList(): Array<CollectionInfo>;
    setCollectionsList(value: Array<CollectionInfo>): ListCollectionsResponse;
    addCollections(value?: CollectionInfo, index?: number): CollectionInfo;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListCollectionsResponse.AsObject;
    static toObject(includeInstance: boolean, msg: ListCollectionsResponse): ListCollectionsResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListCollectionsResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListCollectionsResponse;
    static deserializeBinaryFromReader(message: ListCollectionsResponse, reader: jspb.BinaryReader): ListCollectionsResponse;
}

export namespace ListCollectionsResponse {
    export type AsObject = {
        db: string,
        collectionsList: Array<CollectionInfo.AsObject>,
    }
}

export class DescribeDatabaseRequest extends jspb.Message { 
    getDb(): string;
    setDb(value: string): DescribeDatabaseRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DescribeDatabaseRequest.AsObject;
    static toObject(includeInstance: boolean, msg: DescribeDatabaseRequest): DescribeDatabaseRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DescribeDatabaseRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DescribeDatabaseRequest;
    static deserializeBinaryFromReader(message: DescribeDatabaseRequest, reader: jspb.BinaryReader): DescribeDatabaseRequest;
}

export namespace DescribeDatabaseRequest {
    export type AsObject = {
        db: string,
    }
}

export class DescribeCollectionRequest extends jspb.Message { 
    getDb(): string;
    setDb(value: string): DescribeCollectionRequest;
    getCollection(): string;
    setCollection(value: string): DescribeCollectionRequest;

    hasOptions(): boolean;
    clearOptions(): void;
    getOptions(): CollectionOptions | undefined;
    setOptions(value?: CollectionOptions): DescribeCollectionRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DescribeCollectionRequest.AsObject;
    static toObject(includeInstance: boolean, msg: DescribeCollectionRequest): DescribeCollectionRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DescribeCollectionRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DescribeCollectionRequest;
    static deserializeBinaryFromReader(message: DescribeCollectionRequest, reader: jspb.BinaryReader): DescribeCollectionRequest;
}

export namespace DescribeCollectionRequest {
    export type AsObject = {
        db: string,
        collection: string,
        options?: CollectionOptions.AsObject,
    }
}

export class DescribeDatabaseResponse extends jspb.Message { 
    getDb(): string;
    setDb(value: string): DescribeDatabaseResponse;

    hasMetadata(): boolean;
    clearMetadata(): void;
    getMetadata(): DatabaseMetadata | undefined;
    setMetadata(value?: DatabaseMetadata): DescribeDatabaseResponse;
    clearCollectionsList(): void;
    getCollectionsList(): Array<CollectionDescription>;
    setCollectionsList(value: Array<CollectionDescription>): DescribeDatabaseResponse;
    addCollections(value?: CollectionDescription, index?: number): CollectionDescription;
    getSize(): number;
    setSize(value: number): DescribeDatabaseResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DescribeDatabaseResponse.AsObject;
    static toObject(includeInstance: boolean, msg: DescribeDatabaseResponse): DescribeDatabaseResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DescribeDatabaseResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DescribeDatabaseResponse;
    static deserializeBinaryFromReader(message: DescribeDatabaseResponse, reader: jspb.BinaryReader): DescribeDatabaseResponse;
}

export namespace DescribeDatabaseResponse {
    export type AsObject = {
        db: string,
        metadata?: DatabaseMetadata.AsObject,
        collectionsList: Array<CollectionDescription.AsObject>,
        size: number,
    }
}

export class DescribeCollectionResponse extends jspb.Message { 
    getCollection(): string;
    setCollection(value: string): DescribeCollectionResponse;

    hasMetadata(): boolean;
    clearMetadata(): void;
    getMetadata(): CollectionMetadata | undefined;
    setMetadata(value?: CollectionMetadata): DescribeCollectionResponse;
    getSchema(): Uint8Array | string;
    getSchema_asU8(): Uint8Array;
    getSchema_asB64(): string;
    setSchema(value: Uint8Array | string): DescribeCollectionResponse;
    getSize(): number;
    setSize(value: number): DescribeCollectionResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DescribeCollectionResponse.AsObject;
    static toObject(includeInstance: boolean, msg: DescribeCollectionResponse): DescribeCollectionResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DescribeCollectionResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DescribeCollectionResponse;
    static deserializeBinaryFromReader(message: DescribeCollectionResponse, reader: jspb.BinaryReader): DescribeCollectionResponse;
}

export namespace DescribeCollectionResponse {
    export type AsObject = {
        collection: string,
        metadata?: CollectionMetadata.AsObject,
        schema: Uint8Array | string,
        size: number,
    }
}

export class DatabaseDescription extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DatabaseDescription.AsObject;
    static toObject(includeInstance: boolean, msg: DatabaseDescription): DatabaseDescription.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DatabaseDescription, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DatabaseDescription;
    static deserializeBinaryFromReader(message: DatabaseDescription, reader: jspb.BinaryReader): DatabaseDescription;
}

export namespace DatabaseDescription {
    export type AsObject = {
    }
}

export class CollectionDescription extends jspb.Message { 
    getCollection(): string;
    setCollection(value: string): CollectionDescription;

    hasMetadata(): boolean;
    clearMetadata(): void;
    getMetadata(): CollectionMetadata | undefined;
    setMetadata(value?: CollectionMetadata): CollectionDescription;
    getSchema(): Uint8Array | string;
    getSchema_asU8(): Uint8Array;
    getSchema_asB64(): string;
    setSchema(value: Uint8Array | string): CollectionDescription;
    getSize(): number;
    setSize(value: number): CollectionDescription;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CollectionDescription.AsObject;
    static toObject(includeInstance: boolean, msg: CollectionDescription): CollectionDescription.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CollectionDescription, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CollectionDescription;
    static deserializeBinaryFromReader(message: CollectionDescription, reader: jspb.BinaryReader): CollectionDescription;
}

export namespace CollectionDescription {
    export type AsObject = {
        collection: string,
        metadata?: CollectionMetadata.AsObject,
        schema: Uint8Array | string,
        size: number,
    }
}

export class DatabaseMetadata extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DatabaseMetadata.AsObject;
    static toObject(includeInstance: boolean, msg: DatabaseMetadata): DatabaseMetadata.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DatabaseMetadata, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DatabaseMetadata;
    static deserializeBinaryFromReader(message: DatabaseMetadata, reader: jspb.BinaryReader): DatabaseMetadata;
}

export namespace DatabaseMetadata {
    export type AsObject = {
    }
}

export class CollectionMetadata extends jspb.Message { 
    getType(): CollectionType;
    setType(value: CollectionType): CollectionMetadata;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CollectionMetadata.AsObject;
    static toObject(includeInstance: boolean, msg: CollectionMetadata): CollectionMetadata.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CollectionMetadata, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CollectionMetadata;
    static deserializeBinaryFromReader(message: CollectionMetadata, reader: jspb.BinaryReader): CollectionMetadata;
}

export namespace CollectionMetadata {
    export type AsObject = {
        type: CollectionType,
    }
}

export class EventsRequestOptions extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): EventsRequestOptions.AsObject;
    static toObject(includeInstance: boolean, msg: EventsRequestOptions): EventsRequestOptions.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: EventsRequestOptions, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): EventsRequestOptions;
    static deserializeBinaryFromReader(message: EventsRequestOptions, reader: jspb.BinaryReader): EventsRequestOptions;
}

export namespace EventsRequestOptions {
    export type AsObject = {
    }
}

export class EventsRequest extends jspb.Message { 
    getDb(): string;
    setDb(value: string): EventsRequest;
    getCollection(): string;
    setCollection(value: string): EventsRequest;

    hasOptions(): boolean;
    clearOptions(): void;
    getOptions(): EventsRequestOptions | undefined;
    setOptions(value?: EventsRequestOptions): EventsRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): EventsRequest.AsObject;
    static toObject(includeInstance: boolean, msg: EventsRequest): EventsRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: EventsRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): EventsRequest;
    static deserializeBinaryFromReader(message: EventsRequest, reader: jspb.BinaryReader): EventsRequest;
}

export namespace EventsRequest {
    export type AsObject = {
        db: string,
        collection: string,
        options?: EventsRequestOptions.AsObject,
    }
}

export class EventsResponse extends jspb.Message { 

    hasEvent(): boolean;
    clearEvent(): void;
    getEvent(): StreamEvent | undefined;
    setEvent(value?: StreamEvent): EventsResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): EventsResponse.AsObject;
    static toObject(includeInstance: boolean, msg: EventsResponse): EventsResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: EventsResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): EventsResponse;
    static deserializeBinaryFromReader(message: EventsResponse, reader: jspb.BinaryReader): EventsResponse;
}

export namespace EventsResponse {
    export type AsObject = {
        event?: StreamEvent.AsObject,
    }
}

export class StreamEvent extends jspb.Message { 
    getTxId(): Uint8Array | string;
    getTxId_asU8(): Uint8Array;
    getTxId_asB64(): string;
    setTxId(value: Uint8Array | string): StreamEvent;
    getCollection(): string;
    setCollection(value: string): StreamEvent;
    getOp(): string;
    setOp(value: string): StreamEvent;
    getKey(): Uint8Array | string;
    getKey_asU8(): Uint8Array;
    getKey_asB64(): string;
    setKey(value: Uint8Array | string): StreamEvent;
    getLkey(): Uint8Array | string;
    getLkey_asU8(): Uint8Array;
    getLkey_asB64(): string;
    setLkey(value: Uint8Array | string): StreamEvent;
    getRkey(): Uint8Array | string;
    getRkey_asU8(): Uint8Array;
    getRkey_asB64(): string;
    setRkey(value: Uint8Array | string): StreamEvent;
    getData(): Uint8Array | string;
    getData_asU8(): Uint8Array;
    getData_asB64(): string;
    setData(value: Uint8Array | string): StreamEvent;
    getLast(): boolean;
    setLast(value: boolean): StreamEvent;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): StreamEvent.AsObject;
    static toObject(includeInstance: boolean, msg: StreamEvent): StreamEvent.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: StreamEvent, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): StreamEvent;
    static deserializeBinaryFromReader(message: StreamEvent, reader: jspb.BinaryReader): StreamEvent;
}

export namespace StreamEvent {
    export type AsObject = {
        txId: Uint8Array | string,
        collection: string,
        op: string,
        key: Uint8Array | string,
        lkey: Uint8Array | string,
        rkey: Uint8Array | string,
        data: Uint8Array | string,
        last: boolean,
    }
}

export class GetInfoRequest extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetInfoRequest.AsObject;
    static toObject(includeInstance: boolean, msg: GetInfoRequest): GetInfoRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetInfoRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetInfoRequest;
    static deserializeBinaryFromReader(message: GetInfoRequest, reader: jspb.BinaryReader): GetInfoRequest;
}

export namespace GetInfoRequest {
    export type AsObject = {
    }
}

export class GetInfoResponse extends jspb.Message { 
    getServerVersion(): string;
    setServerVersion(value: string): GetInfoResponse;

    hasError(): boolean;
    clearError(): void;
    getError(): Error | undefined;
    setError(value?: Error): GetInfoResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetInfoResponse.AsObject;
    static toObject(includeInstance: boolean, msg: GetInfoResponse): GetInfoResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetInfoResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetInfoResponse;
    static deserializeBinaryFromReader(message: GetInfoResponse, reader: jspb.BinaryReader): GetInfoResponse;
}

export namespace GetInfoResponse {
    export type AsObject = {
        serverVersion: string,
        error?: Error.AsObject,
    }
}

export class PublishRequestOptions extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): PublishRequestOptions.AsObject;
    static toObject(includeInstance: boolean, msg: PublishRequestOptions): PublishRequestOptions.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: PublishRequestOptions, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): PublishRequestOptions;
    static deserializeBinaryFromReader(message: PublishRequestOptions, reader: jspb.BinaryReader): PublishRequestOptions;
}

export namespace PublishRequestOptions {
    export type AsObject = {
    }
}

export class PublishRequest extends jspb.Message { 
    getDb(): string;
    setDb(value: string): PublishRequest;
    getCollection(): string;
    setCollection(value: string): PublishRequest;
    clearMessagesList(): void;
    getMessagesList(): Array<Uint8Array | string>;
    getMessagesList_asU8(): Array<Uint8Array>;
    getMessagesList_asB64(): Array<string>;
    setMessagesList(value: Array<Uint8Array | string>): PublishRequest;
    addMessages(value: Uint8Array | string, index?: number): Uint8Array | string;

    hasOptions(): boolean;
    clearOptions(): void;
    getOptions(): PublishRequestOptions | undefined;
    setOptions(value?: PublishRequestOptions): PublishRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): PublishRequest.AsObject;
    static toObject(includeInstance: boolean, msg: PublishRequest): PublishRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: PublishRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): PublishRequest;
    static deserializeBinaryFromReader(message: PublishRequest, reader: jspb.BinaryReader): PublishRequest;
}

export namespace PublishRequest {
    export type AsObject = {
        db: string,
        collection: string,
        messagesList: Array<Uint8Array | string>,
        options?: PublishRequestOptions.AsObject,
    }
}

export class PublishResponse extends jspb.Message { 

    hasMetadata(): boolean;
    clearMetadata(): void;
    getMetadata(): ResponseMetadata | undefined;
    setMetadata(value?: ResponseMetadata): PublishResponse;
    getStatus(): string;
    setStatus(value: string): PublishResponse;
    clearKeysList(): void;
    getKeysList(): Array<Uint8Array | string>;
    getKeysList_asU8(): Array<Uint8Array>;
    getKeysList_asB64(): Array<string>;
    setKeysList(value: Array<Uint8Array | string>): PublishResponse;
    addKeys(value: Uint8Array | string, index?: number): Uint8Array | string;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): PublishResponse.AsObject;
    static toObject(includeInstance: boolean, msg: PublishResponse): PublishResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: PublishResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): PublishResponse;
    static deserializeBinaryFromReader(message: PublishResponse, reader: jspb.BinaryReader): PublishResponse;
}

export namespace PublishResponse {
    export type AsObject = {
        metadata?: ResponseMetadata.AsObject,
        status: string,
        keysList: Array<Uint8Array | string>,
    }
}

export class SubscribeRequestOptions extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SubscribeRequestOptions.AsObject;
    static toObject(includeInstance: boolean, msg: SubscribeRequestOptions): SubscribeRequestOptions.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SubscribeRequestOptions, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SubscribeRequestOptions;
    static deserializeBinaryFromReader(message: SubscribeRequestOptions, reader: jspb.BinaryReader): SubscribeRequestOptions;
}

export namespace SubscribeRequestOptions {
    export type AsObject = {
    }
}

export class SubscribeRequest extends jspb.Message { 
    getDb(): string;
    setDb(value: string): SubscribeRequest;
    getCollection(): string;
    setCollection(value: string): SubscribeRequest;

    hasOptions(): boolean;
    clearOptions(): void;
    getOptions(): SubscribeRequestOptions | undefined;
    setOptions(value?: SubscribeRequestOptions): SubscribeRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SubscribeRequest.AsObject;
    static toObject(includeInstance: boolean, msg: SubscribeRequest): SubscribeRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SubscribeRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SubscribeRequest;
    static deserializeBinaryFromReader(message: SubscribeRequest, reader: jspb.BinaryReader): SubscribeRequest;
}

export namespace SubscribeRequest {
    export type AsObject = {
        db: string,
        collection: string,
        options?: SubscribeRequestOptions.AsObject,
    }
}

export class SubscribeResponse extends jspb.Message { 
    getMessage(): Uint8Array | string;
    getMessage_asU8(): Uint8Array;
    getMessage_asB64(): string;
    setMessage(value: Uint8Array | string): SubscribeResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SubscribeResponse.AsObject;
    static toObject(includeInstance: boolean, msg: SubscribeResponse): SubscribeResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SubscribeResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SubscribeResponse;
    static deserializeBinaryFromReader(message: SubscribeResponse, reader: jspb.BinaryReader): SubscribeResponse;
}

export namespace SubscribeResponse {
    export type AsObject = {
        message: Uint8Array | string,
    }
}

export enum Code {
    OK = 0,
    CANCELLED = 1,
    UNKNOWN = 2,
    INVALID_ARGUMENT = 3,
    DEADLINE_EXCEEDED = 4,
    NOT_FOUND = 5,
    ALREADY_EXISTS = 6,
    PERMISSION_DENIED = 7,
    RESOURCE_EXHAUSTED = 8,
    FAILED_PRECONDITION = 9,
    ABORTED = 10,
    OUT_OF_RANGE = 11,
    UNIMPLEMENTED = 12,
    INTERNAL = 13,
    UNAVAILABLE = 14,
    DATA_LOSS = 15,
    UNAUTHENTICATED = 16,
    CONFLICT = 17,
    BAD_GATEWAY = 18,
    METHOD_NOT_ALLOWED = 19,
}

export enum CollectionType {
    DOCUMENTS = 0,
    MESSAGES = 1,
}

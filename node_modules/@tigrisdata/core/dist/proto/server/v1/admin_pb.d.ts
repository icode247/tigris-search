// package: tigrisdata.admin.v1
// file: server/v1/admin.proto

/* tslint:disable */
/* eslint-disable */

import * as jspb from "google-protobuf";
import * as openapiv3_annotations_pb from "../../openapiv3/annotations_pb";

export class CreateNamespaceRequest extends jspb.Message { 
    getId(): number;
    setId(value: number): CreateNamespaceRequest;
    getName(): string;
    setName(value: string): CreateNamespaceRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateNamespaceRequest.AsObject;
    static toObject(includeInstance: boolean, msg: CreateNamespaceRequest): CreateNamespaceRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateNamespaceRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateNamespaceRequest;
    static deserializeBinaryFromReader(message: CreateNamespaceRequest, reader: jspb.BinaryReader): CreateNamespaceRequest;
}

export namespace CreateNamespaceRequest {
    export type AsObject = {
        id: number,
        name: string,
    }
}

export class CreateNamespaceResponse extends jspb.Message { 
    getMessage(): string;
    setMessage(value: string): CreateNamespaceResponse;
    getStatus(): string;
    setStatus(value: string): CreateNamespaceResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateNamespaceResponse.AsObject;
    static toObject(includeInstance: boolean, msg: CreateNamespaceResponse): CreateNamespaceResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateNamespaceResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateNamespaceResponse;
    static deserializeBinaryFromReader(message: CreateNamespaceResponse, reader: jspb.BinaryReader): CreateNamespaceResponse;
}

export namespace CreateNamespaceResponse {
    export type AsObject = {
        message: string,
        status: string,
    }
}

export class NamespaceInfo extends jspb.Message { 
    getId(): number;
    setId(value: number): NamespaceInfo;
    getName(): string;
    setName(value: string): NamespaceInfo;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): NamespaceInfo.AsObject;
    static toObject(includeInstance: boolean, msg: NamespaceInfo): NamespaceInfo.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: NamespaceInfo, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): NamespaceInfo;
    static deserializeBinaryFromReader(message: NamespaceInfo, reader: jspb.BinaryReader): NamespaceInfo;
}

export namespace NamespaceInfo {
    export type AsObject = {
        id: number,
        name: string,
    }
}

export class ListNamespacesRequest extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListNamespacesRequest.AsObject;
    static toObject(includeInstance: boolean, msg: ListNamespacesRequest): ListNamespacesRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListNamespacesRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListNamespacesRequest;
    static deserializeBinaryFromReader(message: ListNamespacesRequest, reader: jspb.BinaryReader): ListNamespacesRequest;
}

export namespace ListNamespacesRequest {
    export type AsObject = {
    }
}

export class ListNamespacesResponse extends jspb.Message { 
    clearNamespacesList(): void;
    getNamespacesList(): Array<NamespaceInfo>;
    setNamespacesList(value: Array<NamespaceInfo>): ListNamespacesResponse;
    addNamespaces(value?: NamespaceInfo, index?: number): NamespaceInfo;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListNamespacesResponse.AsObject;
    static toObject(includeInstance: boolean, msg: ListNamespacesResponse): ListNamespacesResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListNamespacesResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListNamespacesResponse;
    static deserializeBinaryFromReader(message: ListNamespacesResponse, reader: jspb.BinaryReader): ListNamespacesResponse;
}

export namespace ListNamespacesResponse {
    export type AsObject = {
        namespacesList: Array<NamespaceInfo.AsObject>,
    }
}

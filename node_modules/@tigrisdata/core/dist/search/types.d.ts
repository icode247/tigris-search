import { LogicalFilter, Selector, SelectorFilter, TigrisCollectionType } from "../types";
import { FacetCount as ProtoFacetCount, FacetStats as ProtoFacetStats, Page as ProtoSearchPage, SearchFacet as ProtoSearchFacet, SearchHit as ProtoSearchHit, SearchHitMeta as ProtoSearchHitMeta, SearchMetadata as ProtoSearchMetadata, SearchResponse as ProtoSearchResponse } from "../proto/server/v1/api_pb";
export declare const MATCH_ALL_QUERY_STRING = "";
/**
 * Search request params
 */
export declare type SearchRequest<T extends TigrisCollectionType> = {
    /**
     * Text to query
     */
    q: string;
    /**
     * Fields to project search query on
     */
    searchFields?: Array<string>;
    /**
     * Filter to further refine the search results
     */
    filter?: SelectorFilter<T> | LogicalFilter<T> | Selector<T>;
    /**
     * Facet fields to categorically arrange indexed terms
     */
    facets?: FacetFieldsQuery;
    /**
     * Sort the search results in indicated order
     */
    sort?: Ordering;
    /**
     * Document fields to include when returning search results
     */
    includeFields?: Array<string>;
    /**
     * Document fields to exclude when returning search results
     */
    excludeFields?: Array<string>;
};
/**
 * Pagination params for search request
 */
export declare type SearchRequestOptions = {
    /**
     * Page number to fetch search results for
     */
    page: number;
    /**
     * Number of search results to fetch per page
     */
    perPage: number;
};
export declare type FacetFieldsQuery = FacetFieldOptions | FacetFields;
/**
 * Map of collection field names and faceting options to include facet results in search response
 */
export declare type FacetFieldOptions = {
    [key: string]: FacetQueryOptions;
};
/**
 * Array of field names to include facet results for in search response
 */
export declare type FacetFields = Array<string>;
/**
 * Information to build facets in search results
 * Use `Utility.createFacetQueryOptions()` to generate using defaults
 *
 * @see {@link Utility.createFacetQueryOptions}
 */
export declare type FacetQueryOptions = {
    /**
     * Maximum number of facets to include in results
     */
    size: number;
    /**
     * Type of facets to build
     */
    type: FacetQueryFieldType;
};
export declare enum FacetQueryFieldType {
    VALUE = "value"
}
/**
 * List of fields and their corresponding sort orders to order the search results.
 */
export declare type Ordering = Array<SortField>;
/**
 * Collection field name and sort order
 */
export declare type SortField = {
    field: string;
    order: SortOrder;
};
export declare enum SortOrder {
    /**
     * Ascending order
     */
    ASC = "$asc",
    /**
     * Descending order
     */
    DESC = "$desc"
}
/**
 * Outcome of executing search query
 * @typeParam T - type of Tigris collection
 */
export declare class SearchResult<T> {
    private readonly _hits;
    private readonly _facets;
    private readonly _meta;
    constructor(hits: Array<Hit<T>>, facets: Map<string, FacetCountDistribution>, meta: SearchMeta | undefined);
    /**
     * @returns matched documents as immutable list
     * @readonly
     */
    get hits(): ReadonlyArray<Hit<T>>;
    /**
     * @returns distribution of facets for fields included in facet query
     * @readonly
     */
    get facets(): ReadonlyMap<string, FacetCountDistribution>;
    /**
     * @returns metadata associated with {@link SearchResult}
     * @readonly
     * @defaultValue undefined
     */
    get meta(): SearchMeta | undefined;
    static from<T>(resp: ProtoSearchResponse): SearchResult<T>;
}
/**
 * Matched document and relevance metadata for a search query
 * @typeParam T - type of Tigris collection
 */
export declare class Hit<T extends TigrisCollectionType> {
    private readonly _document;
    private readonly _meta;
    constructor(document: T, meta: HitMeta | undefined);
    /**
     * @returns json deserialized collection document
     * @readonly
     */
    get document(): T;
    /**
     * @returns relevance metadata for the matched document
     * @readonly
     */
    get meta(): HitMeta | undefined;
    static from<T>(resp: ProtoSearchHit): Hit<T>;
}
/**
 * Relevance metadata for a matched document
 */
export declare class HitMeta {
    private readonly _createdAt;
    private readonly _updatedAt;
    constructor(createdAt: Date | undefined, updatedAt: Date | undefined);
    /**
     * @returns time at which document was inserted/replaced to a precision of milliseconds
     * @readonly
     */
    get createdAt(): Date | undefined;
    /**
     * @returns time at which document was updated to a precision of milliseconds
     * @readonly
     */
    get updatedAt(): Date | undefined;
    static from(resp: ProtoSearchHitMeta): HitMeta;
}
/**
 * Distribution of values in a faceted field
 */
export declare class FacetCountDistribution {
    private readonly _counts;
    private readonly _stats;
    constructor(counts: ReadonlyArray<FacetCount>, stats: FacetStats | undefined);
    /**
     * @returns list of field values and their aggregated counts
     * @readonly
     */
    get counts(): ReadonlyArray<FacetCount>;
    /**
     * @returns summary of faceted field
     * @readonly
     */
    get stats(): FacetStats | undefined;
    static from(resp: ProtoSearchFacet): FacetCountDistribution;
}
/**
 * Aggregate count of values in a faceted field
 */
export declare class FacetCount {
    private readonly _value;
    private readonly _count;
    constructor(value: string, count: number);
    /**
     * @returns field's attribute value
     * @readonly
     */
    get value(): string;
    /**
     * @returns count of field values in the search results
     * @readonly
     */
    get count(): number;
    static from(resp: ProtoFacetCount): FacetCount;
}
/**
 * Summary of field values in a faceted field
 */
export declare class FacetStats {
    private readonly _avg;
    private readonly _count;
    private readonly _max;
    private readonly _min;
    private readonly _sum;
    constructor(avg: number, count: number, max: number, min: number, sum: number);
    /**
     * Only for numeric fields. Average of values in a numeric field
     *
     * @returns average of values in a numeric field
     * @defaultValue `0`
     * @readonly
     */
    get avg(): number;
    /**
     * @returns Count of values in a faceted field
     * @readonly
     */
    get count(): number;
    /**
     * Only for numeric fields. Maximum value in a numeric field
     *
     * @returns maximum value in a numeric field
     * @defaultValue `0`
     * @readonly
     */
    get max(): number;
    /**
     * Only for numeric fields. Minimum value in a numeric field
     *
     * @returns minimum value in a numeric field
     * @defaultValue `0`
     * @readonly
     */
    get min(): number;
    /**
     * Only for numeric fields. Sum of numeric values in the field
     *
     * @returns sum of numeric values in the field
     * @defaultValue `0`
     * @readonly
     */
    get sum(): number;
    static from(resp: ProtoFacetStats): FacetStats;
}
/**
 * Metadata associated with search results
 */
export declare class SearchMeta {
    private readonly _found;
    private readonly _totalPages;
    private readonly _page;
    constructor(found: number, totalPages: number, page: Page);
    /**
     * @returns total number of matched hits for search query
     * @readonly
     */
    get found(): number;
    /**
     * @returns total number of pages of search results
     * @readonly
     */
    get totalPages(): number;
    /**
     * @returns current page information
     * @readonly
     */
    get page(): Page;
    static from(resp: ProtoSearchMetadata): SearchMeta;
}
/**
 * Pagination metadata associated with search results
 */
export declare class Page {
    private readonly _current;
    private readonly _size;
    constructor(current: any, size: any);
    /**
     * @returns current page number for the paginated search results
     * @readonly
     */
    get current(): any;
    /**
     * @returns maximum number of search results included per page
     * @readonly
     */
    get size(): any;
    static from(resp: ProtoSearchPage): Page;
}

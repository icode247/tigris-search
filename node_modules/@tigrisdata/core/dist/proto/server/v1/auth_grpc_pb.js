// GENERATED CODE -- DO NOT EDIT!

// Original file comments:
// Copyright 2022 Tigris Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
'use strict';
var grpc = require('@grpc/grpc-js');
var server_v1_auth_pb = require('../../server/v1/auth_pb.js');
var google_api_annotations_pb = require('../../google/api/annotations_pb.js');
var openapiv3_annotations_pb = require('../../openapiv3/annotations_pb.js');

function serialize_tigrisdata_auth_v1_CreateApplicationRequest(arg) {
  if (!(arg instanceof server_v1_auth_pb.CreateApplicationRequest)) {
    throw new Error('Expected argument of type tigrisdata.auth.v1.CreateApplicationRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_auth_v1_CreateApplicationRequest(buffer_arg) {
  return server_v1_auth_pb.CreateApplicationRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_auth_v1_CreateApplicationResponse(arg) {
  if (!(arg instanceof server_v1_auth_pb.CreateApplicationResponse)) {
    throw new Error('Expected argument of type tigrisdata.auth.v1.CreateApplicationResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_auth_v1_CreateApplicationResponse(buffer_arg) {
  return server_v1_auth_pb.CreateApplicationResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_auth_v1_DeleteApplicationResponse(arg) {
  if (!(arg instanceof server_v1_auth_pb.DeleteApplicationResponse)) {
    throw new Error('Expected argument of type tigrisdata.auth.v1.DeleteApplicationResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_auth_v1_DeleteApplicationResponse(buffer_arg) {
  return server_v1_auth_pb.DeleteApplicationResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_auth_v1_DeleteApplicationsRequest(arg) {
  if (!(arg instanceof server_v1_auth_pb.DeleteApplicationsRequest)) {
    throw new Error('Expected argument of type tigrisdata.auth.v1.DeleteApplicationsRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_auth_v1_DeleteApplicationsRequest(buffer_arg) {
  return server_v1_auth_pb.DeleteApplicationsRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_auth_v1_GetAccessTokenRequest(arg) {
  if (!(arg instanceof server_v1_auth_pb.GetAccessTokenRequest)) {
    throw new Error('Expected argument of type tigrisdata.auth.v1.GetAccessTokenRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_auth_v1_GetAccessTokenRequest(buffer_arg) {
  return server_v1_auth_pb.GetAccessTokenRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_auth_v1_GetAccessTokenResponse(arg) {
  if (!(arg instanceof server_v1_auth_pb.GetAccessTokenResponse)) {
    throw new Error('Expected argument of type tigrisdata.auth.v1.GetAccessTokenResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_auth_v1_GetAccessTokenResponse(buffer_arg) {
  return server_v1_auth_pb.GetAccessTokenResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_auth_v1_ListApplicationsRequest(arg) {
  if (!(arg instanceof server_v1_auth_pb.ListApplicationsRequest)) {
    throw new Error('Expected argument of type tigrisdata.auth.v1.ListApplicationsRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_auth_v1_ListApplicationsRequest(buffer_arg) {
  return server_v1_auth_pb.ListApplicationsRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_auth_v1_ListApplicationsResponse(arg) {
  if (!(arg instanceof server_v1_auth_pb.ListApplicationsResponse)) {
    throw new Error('Expected argument of type tigrisdata.auth.v1.ListApplicationsResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_auth_v1_ListApplicationsResponse(buffer_arg) {
  return server_v1_auth_pb.ListApplicationsResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_auth_v1_RotateApplicationSecretRequest(arg) {
  if (!(arg instanceof server_v1_auth_pb.RotateApplicationSecretRequest)) {
    throw new Error('Expected argument of type tigrisdata.auth.v1.RotateApplicationSecretRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_auth_v1_RotateApplicationSecretRequest(buffer_arg) {
  return server_v1_auth_pb.RotateApplicationSecretRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_auth_v1_RotateApplicationSecretResponse(arg) {
  if (!(arg instanceof server_v1_auth_pb.RotateApplicationSecretResponse)) {
    throw new Error('Expected argument of type tigrisdata.auth.v1.RotateApplicationSecretResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_auth_v1_RotateApplicationSecretResponse(buffer_arg) {
  return server_v1_auth_pb.RotateApplicationSecretResponse.deserializeBinary(new Uint8Array(buffer_arg));
}


var AuthService = exports.AuthService = {
  // Gets an access token.
// supports two grant_type: [refresh_token, client_credentials]
getAccessToken: {
    path: '/tigrisdata.auth.v1.Auth/getAccessToken',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_auth_pb.GetAccessTokenRequest,
    responseType: server_v1_auth_pb.GetAccessTokenResponse,
    requestSerialize: serialize_tigrisdata_auth_v1_GetAccessTokenRequest,
    requestDeserialize: deserialize_tigrisdata_auth_v1_GetAccessTokenRequest,
    responseSerialize: serialize_tigrisdata_auth_v1_GetAccessTokenResponse,
    responseDeserialize: deserialize_tigrisdata_auth_v1_GetAccessTokenResponse,
  },
  // Create an application.
createApplication: {
    path: '/tigrisdata.auth.v1.Auth/createApplication',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_auth_pb.CreateApplicationRequest,
    responseType: server_v1_auth_pb.CreateApplicationResponse,
    requestSerialize: serialize_tigrisdata_auth_v1_CreateApplicationRequest,
    requestDeserialize: deserialize_tigrisdata_auth_v1_CreateApplicationRequest,
    responseSerialize: serialize_tigrisdata_auth_v1_CreateApplicationResponse,
    responseDeserialize: deserialize_tigrisdata_auth_v1_CreateApplicationResponse,
  },
  // Delete an application.
deleteApplication: {
    path: '/tigrisdata.auth.v1.Auth/deleteApplication',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_auth_pb.DeleteApplicationsRequest,
    responseType: server_v1_auth_pb.DeleteApplicationResponse,
    requestSerialize: serialize_tigrisdata_auth_v1_DeleteApplicationsRequest,
    requestDeserialize: deserialize_tigrisdata_auth_v1_DeleteApplicationsRequest,
    responseSerialize: serialize_tigrisdata_auth_v1_DeleteApplicationResponse,
    responseDeserialize: deserialize_tigrisdata_auth_v1_DeleteApplicationResponse,
  },
  // Lists all application visible to requesting actor.
listApplications: {
    path: '/tigrisdata.auth.v1.Auth/listApplications',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_auth_pb.ListApplicationsRequest,
    responseType: server_v1_auth_pb.ListApplicationsResponse,
    requestSerialize: serialize_tigrisdata_auth_v1_ListApplicationsRequest,
    requestDeserialize: deserialize_tigrisdata_auth_v1_ListApplicationsRequest,
    responseSerialize: serialize_tigrisdata_auth_v1_ListApplicationsResponse,
    responseDeserialize: deserialize_tigrisdata_auth_v1_ListApplicationsResponse,
  },
  // RotateApplicationRequest returns the new application with rotated secret
rotateApplicationSecret: {
    path: '/tigrisdata.auth.v1.Auth/rotateApplicationSecret',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_auth_pb.RotateApplicationSecretRequest,
    responseType: server_v1_auth_pb.RotateApplicationSecretResponse,
    requestSerialize: serialize_tigrisdata_auth_v1_RotateApplicationSecretRequest,
    requestDeserialize: deserialize_tigrisdata_auth_v1_RotateApplicationSecretRequest,
    responseSerialize: serialize_tigrisdata_auth_v1_RotateApplicationSecretResponse,
    responseDeserialize: deserialize_tigrisdata_auth_v1_RotateApplicationSecretResponse,
  },
};

exports.AuthClient = grpc.makeGenericClientConstructor(AuthService);

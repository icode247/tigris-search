import { TigrisClient } from "./proto/server/v1/api_grpc_pb";
import { CollectionInfo, CollectionOptions, DatabaseDescription, DropCollectionResponse, TigrisCollectionType, TigrisSchema, TransactionOptions, TransactionResponse } from "./types";
import { Collection } from "./collection";
import { Session } from "./session";
import { Topic } from "./topic";
export declare class DB {
    private readonly _db;
    private readonly grpcClient;
    constructor(db: string, grpcClient: TigrisClient);
    createOrUpdateCollection<T extends TigrisCollectionType>(collectionName: string, schema: TigrisSchema<T>): Promise<Collection<T>>;
    createOrUpdateTopic<T extends TigrisCollectionType>(topicName: string, schema: TigrisSchema<T>): Promise<Topic<T>>;
    private createOrUpdate;
    listCollections(options?: CollectionOptions): Promise<Array<CollectionInfo>>;
    dropCollection(collectionName: string): Promise<DropCollectionResponse>;
    describe(): Promise<DatabaseDescription>;
    getCollection<T>(collectionName: string): Collection<T>;
    getTopic<T>(topicName: string): Topic<T>;
    transact(fn: (tx: Session) => void): Promise<TransactionResponse>;
    beginTransaction(_options?: TransactionOptions): Promise<Session>;
    get db(): string;
}

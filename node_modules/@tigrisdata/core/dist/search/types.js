"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Page = exports.SearchMeta = exports.FacetStats = exports.FacetCount = exports.FacetCountDistribution = exports.HitMeta = exports.Hit = exports.SearchResult = exports.SortOrder = exports.FacetQueryFieldType = exports.MATCH_ALL_QUERY_STRING = void 0;
const utility_1 = require("../utility");
exports.MATCH_ALL_QUERY_STRING = "";
var FacetQueryFieldType;
(function (FacetQueryFieldType) {
    FacetQueryFieldType["VALUE"] = "value";
})(FacetQueryFieldType = exports.FacetQueryFieldType || (exports.FacetQueryFieldType = {}));
var SortOrder;
(function (SortOrder) {
    /**
     * Ascending order
     */
    SortOrder["ASC"] = "$asc";
    /**
     * Descending order
     */
    SortOrder["DESC"] = "$desc";
})(SortOrder = exports.SortOrder || (exports.SortOrder = {}));
/**
 * Outcome of executing search query
 * @typeParam T - type of Tigris collection
 */
class SearchResult {
    constructor(hits, facets, meta) {
        this._hits = hits;
        this._facets = facets;
        this._meta = meta;
    }
    /**
     * @returns matched documents as immutable list
     * @readonly
     */
    get hits() {
        return this._hits;
    }
    /**
     * @returns distribution of facets for fields included in facet query
     * @readonly
     */
    get facets() {
        return this._facets;
    }
    /**
     * @returns metadata associated with {@link SearchResult}
     * @readonly
     * @defaultValue undefined
     */
    get meta() {
        return this._meta;
    }
    static from(resp) {
        const _meta = typeof (resp === null || resp === void 0 ? void 0 : resp.getMeta()) !== "undefined" ? SearchMeta.from(resp.getMeta()) : undefined;
        const _hits = resp.getHitsList().map(h => Hit.from(h));
        const _facets = new Map(resp.getFacetsMap().toArray().map(
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        ([k, _]) => [k, FacetCountDistribution.from(resp.getFacetsMap().get(k))]));
        return new SearchResult(_hits, _facets, _meta);
    }
}
exports.SearchResult = SearchResult;
/**
 * Matched document and relevance metadata for a search query
 * @typeParam T - type of Tigris collection
 */
class Hit {
    constructor(document, meta) {
        this._document = document;
        this._meta = meta;
    }
    /**
     * @returns json deserialized collection document
     * @readonly
     */
    get document() {
        return this._document;
    }
    /**
     * @returns relevance metadata for the matched document
     * @readonly
     */
    get meta() {
        return this._meta;
    }
    static from(resp) {
        const document = utility_1.Utility.jsonStringToObj(utility_1.Utility._base64Decode(resp.getData_asB64()));
        const meta = resp.hasMetadata() ? HitMeta.from(resp.getMetadata()) : undefined;
        return new Hit(document, meta);
    }
}
exports.Hit = Hit;
/**
 * Relevance metadata for a matched document
 */
class HitMeta {
    constructor(createdAt, updatedAt) {
        this._createdAt = createdAt;
        this._updatedAt = updatedAt;
    }
    /**
     * @returns time at which document was inserted/replaced to a precision of milliseconds
     * @readonly
     */
    get createdAt() {
        return this._createdAt;
    }
    /**
     * @returns time at which document was updated to a precision of milliseconds
     * @readonly
     */
    get updatedAt() {
        return this._updatedAt;
    }
    static from(resp) {
        var _a, _b;
        const _createdAt = typeof ((_a = resp === null || resp === void 0 ? void 0 : resp.getCreatedAt()) === null || _a === void 0 ? void 0 : _a.getSeconds()) !== "undefined" ? new Date(resp.getCreatedAt().getSeconds() * 1000) : undefined;
        const _updatedAt = typeof ((_b = resp === null || resp === void 0 ? void 0 : resp.getUpdatedAt()) === null || _b === void 0 ? void 0 : _b.getSeconds()) !== "undefined" ? new Date(resp.getUpdatedAt().getSeconds() * 1000) : undefined;
        return new HitMeta(_createdAt, _updatedAt);
    }
}
exports.HitMeta = HitMeta;
/**
 * Distribution of values in a faceted field
 */
class FacetCountDistribution {
    constructor(counts, stats) {
        this._counts = counts;
        this._stats = stats;
    }
    /**
     * @returns list of field values and their aggregated counts
     * @readonly
     */
    get counts() {
        return this._counts;
    }
    /**
     * @returns summary of faceted field
     * @readonly
     */
    get stats() {
        return this._stats;
    }
    static from(resp) {
        const stats = typeof (resp === null || resp === void 0 ? void 0 : resp.getStats()) !== "undefined" ? FacetStats.from(resp.getStats()) : undefined;
        const counts = resp.getCountsList().map(c => FacetCount.from(c));
        return new FacetCountDistribution(counts, stats);
    }
}
exports.FacetCountDistribution = FacetCountDistribution;
/**
 * Aggregate count of values in a faceted field
 */
class FacetCount {
    constructor(value, count) {
        this._value = value;
        this._count = count;
    }
    /**
     * @returns field's attribute value
     * @readonly
     */
    get value() {
        return this._value;
    }
    /**
     * @returns count of field values in the search results
     * @readonly
     */
    get count() {
        return this._count;
    }
    static from(resp) {
        return new FacetCount(resp.getValue(), resp.getCount());
    }
}
exports.FacetCount = FacetCount;
/**
 * Summary of field values in a faceted field
 */
class FacetStats {
    constructor(avg, count, max, min, sum) {
        this._avg = avg;
        this._count = count;
        this._max = max;
        this._min = min;
        this._sum = sum;
    }
    /**
     * Only for numeric fields. Average of values in a numeric field
     *
     * @returns average of values in a numeric field
     * @defaultValue `0`
     * @readonly
     */
    get avg() {
        return this._avg;
    }
    /**
     * @returns Count of values in a faceted field
     * @readonly
     */
    get count() {
        return this._count;
    }
    /**
     * Only for numeric fields. Maximum value in a numeric field
     *
     * @returns maximum value in a numeric field
     * @defaultValue `0`
     * @readonly
     */
    get max() {
        return this._max;
    }
    /**
     * Only for numeric fields. Minimum value in a numeric field
     *
     * @returns minimum value in a numeric field
     * @defaultValue `0`
     * @readonly
     */
    get min() {
        return this._min;
    }
    /**
     * Only for numeric fields. Sum of numeric values in the field
     *
     * @returns sum of numeric values in the field
     * @defaultValue `0`
     * @readonly
     */
    get sum() {
        return this._sum;
    }
    static from(resp) {
        var _a, _b, _c, _d, _e;
        return new FacetStats((_a = resp === null || resp === void 0 ? void 0 : resp.getAvg()) !== null && _a !== void 0 ? _a : 0, (_b = resp === null || resp === void 0 ? void 0 : resp.getCount()) !== null && _b !== void 0 ? _b : 0, (_c = resp === null || resp === void 0 ? void 0 : resp.getMax()) !== null && _c !== void 0 ? _c : 0, (_d = resp === null || resp === void 0 ? void 0 : resp.getMin()) !== null && _d !== void 0 ? _d : 0, (_e = resp === null || resp === void 0 ? void 0 : resp.getSum()) !== null && _e !== void 0 ? _e : 0);
    }
}
exports.FacetStats = FacetStats;
/**
 * Metadata associated with search results
 */
class SearchMeta {
    constructor(found, totalPages, page) {
        this._found = found;
        this._totalPages = totalPages;
        this._page = page;
    }
    /**
     * @returns total number of matched hits for search query
     * @readonly
     */
    get found() {
        return this._found;
    }
    /**
     * @returns total number of pages of search results
     * @readonly
     */
    get totalPages() {
        return this._totalPages;
    }
    /**
     * @returns current page information
     * @readonly
     */
    get page() {
        return this._page;
    }
    static from(resp) {
        var _a, _b;
        const found = (_a = resp === null || resp === void 0 ? void 0 : resp.getFound()) !== null && _a !== void 0 ? _a : 0;
        const totalPages = (_b = resp === null || resp === void 0 ? void 0 : resp.getTotalPages()) !== null && _b !== void 0 ? _b : 0;
        const page = typeof (resp === null || resp === void 0 ? void 0 : resp.getPage()) !== "undefined" ? Page.from(resp.getPage()) : undefined;
        return new SearchMeta(found, totalPages, page);
    }
}
exports.SearchMeta = SearchMeta;
/**
 * Pagination metadata associated with search results
 */
class Page {
    constructor(current, size) {
        this._current = current;
        this._size = size;
    }
    /**
     * @returns current page number for the paginated search results
     * @readonly
     */
    get current() {
        return this._current;
    }
    /**
     * @returns maximum number of search results included per page
     * @readonly
     */
    get size() {
        return this._size;
    }
    static from(resp) {
        var _a, _b;
        const current = (_a = resp === null || resp === void 0 ? void 0 : resp.getCurrent()) !== null && _a !== void 0 ? _a : 0;
        const size = (_b = resp === null || resp === void 0 ? void 0 : resp.getSize()) !== null && _b !== void 0 ? _b : 0;
        return new Page(current, size);
    }
}
exports.Page = Page;

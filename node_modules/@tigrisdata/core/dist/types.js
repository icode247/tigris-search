"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TigrisDataTypes = exports.UpdateFieldsOperator = exports.SelectorFilterOperator = exports.LogicalOperator = exports.ServerMetadata = exports.InsertOrReplaceOptions = exports.PublishOptions = exports.InsertOptions = exports.TransactionResponse = exports.RollbackTransactionResponse = exports.CommitTransactionResponse = exports.StreamEvent = exports.EventsRequestOptions = exports.TransactionOptions = exports.UpdateRequestOptions = exports.ReadRequestOptions = exports.DeleteRequestOptions = exports.WriteOptions = exports.UpdateResponse = exports.DeleteResponse = exports.DMLResponse = exports.DMLMetadata = exports.TigrisResponse = exports.CollectionDescription = exports.DatabaseDescription = exports.DropCollectionResponse = exports.DropDatabaseResponse = exports.CollectionOptions = exports.DatabaseOptions = exports.CollectionMetadata = exports.DatabaseMetadata = exports.CollectionInfo = exports.DatabaseInfo = void 0;
class DatabaseInfo {
    constructor(name, metadata) {
        this._name = name;
        this._metadata = metadata;
    }
    get name() {
        return this._name;
    }
    get metadata() {
        return this._metadata;
    }
}
exports.DatabaseInfo = DatabaseInfo;
class CollectionInfo {
    constructor(name, metadata) {
        this._name = name;
        this._metadata = metadata;
    }
    get name() {
        return this._name;
    }
    get metadata() {
        return this._metadata;
    }
}
exports.CollectionInfo = CollectionInfo;
class DatabaseMetadata {
}
exports.DatabaseMetadata = DatabaseMetadata;
class CollectionMetadata {
}
exports.CollectionMetadata = CollectionMetadata;
class DatabaseOptions {
}
exports.DatabaseOptions = DatabaseOptions;
class CollectionOptions {
}
exports.CollectionOptions = CollectionOptions;
class DropDatabaseResponse {
    constructor(status, message) {
        this._status = status;
        this._message = message;
    }
    get status() {
        return this._status;
    }
    get message() {
        return this._message;
    }
}
exports.DropDatabaseResponse = DropDatabaseResponse;
class DropCollectionResponse {
    constructor(status, message) {
        this._status = status;
        this._message = message;
    }
    get status() {
        return this._status;
    }
    get message() {
        return this._message;
    }
}
exports.DropCollectionResponse = DropCollectionResponse;
class DatabaseDescription {
    constructor(db, metadata, collectionsDescription) {
        this._db = db;
        this._metadata = metadata;
        this._collectionsDescription = collectionsDescription;
    }
    get db() {
        return this._db;
    }
    get metadata() {
        return this._metadata;
    }
    get collectionsDescription() {
        return this._collectionsDescription;
    }
}
exports.DatabaseDescription = DatabaseDescription;
class CollectionDescription {
    constructor(collection, metadata, schema) {
        this._collection = collection;
        this._metadata = metadata;
        this._schema = schema;
    }
    get collection() {
        return this._collection;
    }
    get metadata() {
        return this._metadata;
    }
    get schema() {
        return this._schema;
    }
}
exports.CollectionDescription = CollectionDescription;
class TigrisResponse {
    constructor(status) {
        this._status = status;
    }
    get status() {
        return this._status;
    }
}
exports.TigrisResponse = TigrisResponse;
class DMLMetadata {
    constructor(createdAt, updatedAt) {
        this._createdAt = createdAt;
        this._updatedAt = updatedAt;
    }
    get createdAt() {
        return this._createdAt;
    }
    get updatedAt() {
        return this._updatedAt;
    }
}
exports.DMLMetadata = DMLMetadata;
class DMLResponse extends TigrisResponse {
    constructor(status, metadata) {
        super(status);
        this._metadata = metadata;
    }
    get metadata() {
        return this._metadata;
    }
}
exports.DMLResponse = DMLResponse;
class DeleteResponse extends DMLResponse {
    constructor(status, metadata) {
        super(status, metadata);
    }
}
exports.DeleteResponse = DeleteResponse;
class UpdateResponse extends DMLResponse {
    constructor(status, metadata) {
        super(status, metadata);
    }
}
exports.UpdateResponse = UpdateResponse;
class WriteOptions {
}
exports.WriteOptions = WriteOptions;
class DeleteRequestOptions {
}
exports.DeleteRequestOptions = DeleteRequestOptions;
class ReadRequestOptions {
    constructor(limit, skip, offset) {
        this._limit = limit !== null && limit !== void 0 ? limit : ReadRequestOptions.DEFAULT_LIMIT;
        this._skip = skip !== null && skip !== void 0 ? skip : ReadRequestOptions.DEFAULT_SKIP;
        this._offset = offset;
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        this._limit = value;
    }
    get skip() {
        return this._skip;
    }
    set skip(value) {
        this._skip = value;
    }
    get offset() {
        return this._offset;
    }
    set offset(value) {
        this._offset = value;
    }
}
exports.ReadRequestOptions = ReadRequestOptions;
ReadRequestOptions.DEFAULT_LIMIT = 100;
ReadRequestOptions.DEFAULT_SKIP = 0;
class UpdateRequestOptions {
}
exports.UpdateRequestOptions = UpdateRequestOptions;
class TransactionOptions {
}
exports.TransactionOptions = TransactionOptions;
class EventsRequestOptions {
}
exports.EventsRequestOptions = EventsRequestOptions;
class StreamEvent {
    constructor(txId, collection, op, data, last) {
        this._txId = txId;
        this._collection = collection;
        this._op = op;
        this._data = data;
        this._last = last;
    }
    get txId() {
        return this._txId;
    }
    get collection() {
        return this._collection;
    }
    get op() {
        return this._op;
    }
    get data() {
        return this._data;
    }
    get last() {
        return this._last;
    }
}
exports.StreamEvent = StreamEvent;
class CommitTransactionResponse extends TigrisResponse {
    constructor(status) {
        super(status);
    }
}
exports.CommitTransactionResponse = CommitTransactionResponse;
class RollbackTransactionResponse extends TigrisResponse {
    constructor(status) {
        super(status);
    }
}
exports.RollbackTransactionResponse = RollbackTransactionResponse;
class TransactionResponse extends TigrisResponse {
    constructor(status) {
        super(status);
    }
}
exports.TransactionResponse = TransactionResponse;
class InsertOptions {
}
exports.InsertOptions = InsertOptions;
class PublishOptions {
}
exports.PublishOptions = PublishOptions;
class InsertOrReplaceOptions {
}
exports.InsertOrReplaceOptions = InsertOrReplaceOptions;
class ServerMetadata {
    constructor(serverVersion) {
        this._serverVersion = serverVersion;
    }
    get serverVersion() {
        return this._serverVersion;
    }
}
exports.ServerMetadata = ServerMetadata;
var LogicalOperator;
(function (LogicalOperator) {
    LogicalOperator["AND"] = "$and";
    LogicalOperator["OR"] = "$or";
})(LogicalOperator = exports.LogicalOperator || (exports.LogicalOperator = {}));
var SelectorFilterOperator;
(function (SelectorFilterOperator) {
    SelectorFilterOperator["EQ"] = "$eq";
    SelectorFilterOperator["LT"] = "$lt";
    SelectorFilterOperator["LTE"] = "$lte";
    SelectorFilterOperator["GT"] = "$gt";
    SelectorFilterOperator["GTE"] = "$gte";
    SelectorFilterOperator["NONE"] = "$none";
})(SelectorFilterOperator = exports.SelectorFilterOperator || (exports.SelectorFilterOperator = {}));
var UpdateFieldsOperator;
(function (UpdateFieldsOperator) {
    UpdateFieldsOperator["SET"] = "$set";
})(UpdateFieldsOperator = exports.UpdateFieldsOperator || (exports.UpdateFieldsOperator = {}));
var TigrisDataTypes;
(function (TigrisDataTypes) {
    TigrisDataTypes["STRING"] = "string";
    TigrisDataTypes["INT32"] = "int32";
    TigrisDataTypes["INT64"] = "int64";
    TigrisDataTypes["NUMBER"] = "number";
    TigrisDataTypes["NUMBER_BIGINT"] = "bigint";
    TigrisDataTypes["DATE_TIME"] = "date-time";
    TigrisDataTypes["BYTE_STRING"] = "byte-string";
    TigrisDataTypes["UUID"] = "uuid";
    TigrisDataTypes["ARRAY"] = "array";
})(TigrisDataTypes = exports.TigrisDataTypes || (exports.TigrisDataTypes = {}));

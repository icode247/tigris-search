// GENERATED CODE -- DO NOT EDIT!

// Original file comments:
// Copyright 2022 Tigris Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
'use strict';
var grpc = require('@grpc/grpc-js');
var server_v1_api_pb = require('../../server/v1/api_pb.js');
var google_api_annotations_pb = require('../../google/api/annotations_pb.js');
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
var openapiv3_annotations_pb = require('../../openapiv3/annotations_pb.js');

function serialize_tigrisdata_v1_BeginTransactionRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.BeginTransactionRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.BeginTransactionRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_BeginTransactionRequest(buffer_arg) {
  return server_v1_api_pb.BeginTransactionRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_BeginTransactionResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.BeginTransactionResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.BeginTransactionResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_BeginTransactionResponse(buffer_arg) {
  return server_v1_api_pb.BeginTransactionResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_CommitTransactionRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.CommitTransactionRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.CommitTransactionRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_CommitTransactionRequest(buffer_arg) {
  return server_v1_api_pb.CommitTransactionRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_CommitTransactionResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.CommitTransactionResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.CommitTransactionResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_CommitTransactionResponse(buffer_arg) {
  return server_v1_api_pb.CommitTransactionResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_CreateDatabaseRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.CreateDatabaseRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.CreateDatabaseRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_CreateDatabaseRequest(buffer_arg) {
  return server_v1_api_pb.CreateDatabaseRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_CreateDatabaseResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.CreateDatabaseResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.CreateDatabaseResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_CreateDatabaseResponse(buffer_arg) {
  return server_v1_api_pb.CreateDatabaseResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_CreateOrUpdateCollectionRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.CreateOrUpdateCollectionRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.CreateOrUpdateCollectionRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_CreateOrUpdateCollectionRequest(buffer_arg) {
  return server_v1_api_pb.CreateOrUpdateCollectionRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_CreateOrUpdateCollectionResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.CreateOrUpdateCollectionResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.CreateOrUpdateCollectionResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_CreateOrUpdateCollectionResponse(buffer_arg) {
  return server_v1_api_pb.CreateOrUpdateCollectionResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_DeleteRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.DeleteRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.DeleteRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_DeleteRequest(buffer_arg) {
  return server_v1_api_pb.DeleteRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_DeleteResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.DeleteResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.DeleteResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_DeleteResponse(buffer_arg) {
  return server_v1_api_pb.DeleteResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_DescribeCollectionRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.DescribeCollectionRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.DescribeCollectionRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_DescribeCollectionRequest(buffer_arg) {
  return server_v1_api_pb.DescribeCollectionRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_DescribeCollectionResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.DescribeCollectionResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.DescribeCollectionResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_DescribeCollectionResponse(buffer_arg) {
  return server_v1_api_pb.DescribeCollectionResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_DescribeDatabaseRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.DescribeDatabaseRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.DescribeDatabaseRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_DescribeDatabaseRequest(buffer_arg) {
  return server_v1_api_pb.DescribeDatabaseRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_DescribeDatabaseResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.DescribeDatabaseResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.DescribeDatabaseResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_DescribeDatabaseResponse(buffer_arg) {
  return server_v1_api_pb.DescribeDatabaseResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_DropCollectionRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.DropCollectionRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.DropCollectionRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_DropCollectionRequest(buffer_arg) {
  return server_v1_api_pb.DropCollectionRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_DropCollectionResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.DropCollectionResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.DropCollectionResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_DropCollectionResponse(buffer_arg) {
  return server_v1_api_pb.DropCollectionResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_DropDatabaseRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.DropDatabaseRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.DropDatabaseRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_DropDatabaseRequest(buffer_arg) {
  return server_v1_api_pb.DropDatabaseRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_DropDatabaseResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.DropDatabaseResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.DropDatabaseResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_DropDatabaseResponse(buffer_arg) {
  return server_v1_api_pb.DropDatabaseResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_EventsRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.EventsRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.EventsRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_EventsRequest(buffer_arg) {
  return server_v1_api_pb.EventsRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_EventsResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.EventsResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.EventsResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_EventsResponse(buffer_arg) {
  return server_v1_api_pb.EventsResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_GetInfoRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.GetInfoRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.GetInfoRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_GetInfoRequest(buffer_arg) {
  return server_v1_api_pb.GetInfoRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_GetInfoResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.GetInfoResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.GetInfoResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_GetInfoResponse(buffer_arg) {
  return server_v1_api_pb.GetInfoResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_InsertRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.InsertRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.InsertRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_InsertRequest(buffer_arg) {
  return server_v1_api_pb.InsertRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_InsertResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.InsertResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.InsertResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_InsertResponse(buffer_arg) {
  return server_v1_api_pb.InsertResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_ListCollectionsRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.ListCollectionsRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.ListCollectionsRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_ListCollectionsRequest(buffer_arg) {
  return server_v1_api_pb.ListCollectionsRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_ListCollectionsResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.ListCollectionsResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.ListCollectionsResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_ListCollectionsResponse(buffer_arg) {
  return server_v1_api_pb.ListCollectionsResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_ListDatabasesRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.ListDatabasesRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.ListDatabasesRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_ListDatabasesRequest(buffer_arg) {
  return server_v1_api_pb.ListDatabasesRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_ListDatabasesResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.ListDatabasesResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.ListDatabasesResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_ListDatabasesResponse(buffer_arg) {
  return server_v1_api_pb.ListDatabasesResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_PublishRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.PublishRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.PublishRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_PublishRequest(buffer_arg) {
  return server_v1_api_pb.PublishRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_PublishResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.PublishResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.PublishResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_PublishResponse(buffer_arg) {
  return server_v1_api_pb.PublishResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_ReadRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.ReadRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.ReadRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_ReadRequest(buffer_arg) {
  return server_v1_api_pb.ReadRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_ReadResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.ReadResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.ReadResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_ReadResponse(buffer_arg) {
  return server_v1_api_pb.ReadResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_ReplaceRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.ReplaceRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.ReplaceRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_ReplaceRequest(buffer_arg) {
  return server_v1_api_pb.ReplaceRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_ReplaceResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.ReplaceResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.ReplaceResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_ReplaceResponse(buffer_arg) {
  return server_v1_api_pb.ReplaceResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_RollbackTransactionRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.RollbackTransactionRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.RollbackTransactionRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_RollbackTransactionRequest(buffer_arg) {
  return server_v1_api_pb.RollbackTransactionRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_RollbackTransactionResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.RollbackTransactionResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.RollbackTransactionResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_RollbackTransactionResponse(buffer_arg) {
  return server_v1_api_pb.RollbackTransactionResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_SearchRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.SearchRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.SearchRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_SearchRequest(buffer_arg) {
  return server_v1_api_pb.SearchRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_SearchResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.SearchResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.SearchResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_SearchResponse(buffer_arg) {
  return server_v1_api_pb.SearchResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_SubscribeRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.SubscribeRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.SubscribeRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_SubscribeRequest(buffer_arg) {
  return server_v1_api_pb.SubscribeRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_SubscribeResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.SubscribeResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.SubscribeResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_SubscribeResponse(buffer_arg) {
  return server_v1_api_pb.SubscribeResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_UpdateRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.UpdateRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.UpdateRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_UpdateRequest(buffer_arg) {
  return server_v1_api_pb.UpdateRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_UpdateResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.UpdateResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.UpdateResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_UpdateResponse(buffer_arg) {
  return server_v1_api_pb.UpdateResponse.deserializeBinary(new Uint8Array(buffer_arg));
}


var TigrisService = exports.TigrisService = {
  // Starts a new transaction and returns a transactional object. All reads/writes performed
// within a transaction will run with serializable isolation.
beginTransaction: {
    path: '/tigrisdata.v1.Tigris/BeginTransaction',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.BeginTransactionRequest,
    responseType: server_v1_api_pb.BeginTransactionResponse,
    requestSerialize: serialize_tigrisdata_v1_BeginTransactionRequest,
    requestDeserialize: deserialize_tigrisdata_v1_BeginTransactionRequest,
    responseSerialize: serialize_tigrisdata_v1_BeginTransactionResponse,
    responseDeserialize: deserialize_tigrisdata_v1_BeginTransactionResponse,
  },
  // Atomically commit all the changes performed in the context of the transaction. Commit provides all
// or nothing semantics by ensuring no partial updates are in the database due to a transaction failure.
commitTransaction: {
    path: '/tigrisdata.v1.Tigris/CommitTransaction',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.CommitTransactionRequest,
    responseType: server_v1_api_pb.CommitTransactionResponse,
    requestSerialize: serialize_tigrisdata_v1_CommitTransactionRequest,
    requestDeserialize: deserialize_tigrisdata_v1_CommitTransactionRequest,
    responseSerialize: serialize_tigrisdata_v1_CommitTransactionResponse,
    responseDeserialize: deserialize_tigrisdata_v1_CommitTransactionResponse,
  },
  // Rollback transaction discards all the changes
// performed in the transaction
rollbackTransaction: {
    path: '/tigrisdata.v1.Tigris/RollbackTransaction',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.RollbackTransactionRequest,
    responseType: server_v1_api_pb.RollbackTransactionResponse,
    requestSerialize: serialize_tigrisdata_v1_RollbackTransactionRequest,
    requestDeserialize: deserialize_tigrisdata_v1_RollbackTransactionRequest,
    responseSerialize: serialize_tigrisdata_v1_RollbackTransactionResponse,
    responseDeserialize: deserialize_tigrisdata_v1_RollbackTransactionResponse,
  },
  // Inserts new documents in the collection and returns an AlreadyExists error if any of the documents
// in the request already exists. Insert provides idempotency by returning an error if the document
// already exists. To replace documents, use REPLACE API instead of INSERT.
insert: {
    path: '/tigrisdata.v1.Tigris/Insert',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.InsertRequest,
    responseType: server_v1_api_pb.InsertResponse,
    requestSerialize: serialize_tigrisdata_v1_InsertRequest,
    requestDeserialize: deserialize_tigrisdata_v1_InsertRequest,
    responseSerialize: serialize_tigrisdata_v1_InsertResponse,
    responseDeserialize: deserialize_tigrisdata_v1_InsertResponse,
  },
  // Inserts the documents or replaces the existing documents in the collections.
replace: {
    path: '/tigrisdata.v1.Tigris/Replace',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.ReplaceRequest,
    responseType: server_v1_api_pb.ReplaceResponse,
    requestSerialize: serialize_tigrisdata_v1_ReplaceRequest,
    requestDeserialize: deserialize_tigrisdata_v1_ReplaceRequest,
    responseSerialize: serialize_tigrisdata_v1_ReplaceResponse,
    responseDeserialize: deserialize_tigrisdata_v1_ReplaceResponse,
  },
  // Delete a range of documents in the collection using the condition provided in the filter.
delete: {
    path: '/tigrisdata.v1.Tigris/Delete',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.DeleteRequest,
    responseType: server_v1_api_pb.DeleteResponse,
    requestSerialize: serialize_tigrisdata_v1_DeleteRequest,
    requestDeserialize: deserialize_tigrisdata_v1_DeleteRequest,
    responseSerialize: serialize_tigrisdata_v1_DeleteResponse,
    responseDeserialize: deserialize_tigrisdata_v1_DeleteResponse,
  },
  // Update a range of documents in the collection using the condition provided in the filter.
update: {
    path: '/tigrisdata.v1.Tigris/Update',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.UpdateRequest,
    responseType: server_v1_api_pb.UpdateResponse,
    requestSerialize: serialize_tigrisdata_v1_UpdateRequest,
    requestDeserialize: deserialize_tigrisdata_v1_UpdateRequest,
    responseSerialize: serialize_tigrisdata_v1_UpdateResponse,
    responseDeserialize: deserialize_tigrisdata_v1_UpdateResponse,
  },
  // Reads a range of documents from the collection. Tigris does not require you to
// index any fields and automatically index all the fields which means you can filter by any field in the document.
// An empty filter will trigger reading all the documents inside this collection. The API supports pagination that
// can be used by passing `Limit/Skip` parameters. The `skip` parameter skips the number of documents from the start and
// the `limit` parameter is used to specify the number of documents to read. You can find more detailed documentation
// of the Read API <a href="https://docs.tigrisdata.com/overview/query" title="here">here</a>.
read: {
    path: '/tigrisdata.v1.Tigris/Read',
    requestStream: false,
    responseStream: true,
    requestType: server_v1_api_pb.ReadRequest,
    responseType: server_v1_api_pb.ReadResponse,
    requestSerialize: serialize_tigrisdata_v1_ReadRequest,
    requestDeserialize: deserialize_tigrisdata_v1_ReadRequest,
    responseSerialize: serialize_tigrisdata_v1_ReadResponse,
    responseDeserialize: deserialize_tigrisdata_v1_ReadResponse,
  },
  // Searches a collection for the documents matching the query. A search can be a term search or a phrase search.
// Search API allows filtering the result set using filters as documented <a href="https://docs.tigrisdata.com/overview/query#specification-1" title="here">here</a>.
// You can also perform a faceted search by passing the fields in the facet parameter.
// You can find more detailed documentation of the Search API with multiple examples <a href="https://docs.tigrisdata.com/overview/search" title="here">here</a>.
search: {
    path: '/tigrisdata.v1.Tigris/Search',
    requestStream: false,
    responseStream: true,
    requestType: server_v1_api_pb.SearchRequest,
    responseType: server_v1_api_pb.SearchResponse,
    requestSerialize: serialize_tigrisdata_v1_SearchRequest,
    requestDeserialize: deserialize_tigrisdata_v1_SearchRequest,
    responseSerialize: serialize_tigrisdata_v1_SearchResponse,
    responseDeserialize: deserialize_tigrisdata_v1_SearchResponse,
  },
  // Creates a new collection or atomically upgrades the collection to the new schema provided in the request.
// Schema changes are applied atomically and immediately without any downtime.
// This endpoint allows the creation of a collection based on the type. <p></p>
// There are two collection types supported by Tigris:
//    <li> DOCUMENTS: Support CRUD APIs.
//    <li> MESSAGES: Supports Pub/Sub APIs.
createOrUpdateCollection: {
    path: '/tigrisdata.v1.Tigris/CreateOrUpdateCollection',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.CreateOrUpdateCollectionRequest,
    responseType: server_v1_api_pb.CreateOrUpdateCollectionResponse,
    requestSerialize: serialize_tigrisdata_v1_CreateOrUpdateCollectionRequest,
    requestDeserialize: deserialize_tigrisdata_v1_CreateOrUpdateCollectionRequest,
    responseSerialize: serialize_tigrisdata_v1_CreateOrUpdateCollectionResponse,
    responseDeserialize: deserialize_tigrisdata_v1_CreateOrUpdateCollectionResponse,
  },
  // Drop the collection inside this database. This API deletes all of the documents inside this collection and any metadata associated with it.
dropCollection: {
    path: '/tigrisdata.v1.Tigris/DropCollection',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.DropCollectionRequest,
    responseType: server_v1_api_pb.DropCollectionResponse,
    requestSerialize: serialize_tigrisdata_v1_DropCollectionRequest,
    requestDeserialize: deserialize_tigrisdata_v1_DropCollectionRequest,
    responseSerialize: serialize_tigrisdata_v1_DropCollectionResponse,
    responseDeserialize: deserialize_tigrisdata_v1_DropCollectionResponse,
  },
  // List returns all the databases.
listDatabases: {
    path: '/tigrisdata.v1.Tigris/ListDatabases',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.ListDatabasesRequest,
    responseType: server_v1_api_pb.ListDatabasesResponse,
    requestSerialize: serialize_tigrisdata_v1_ListDatabasesRequest,
    requestDeserialize: deserialize_tigrisdata_v1_ListDatabasesRequest,
    responseSerialize: serialize_tigrisdata_v1_ListDatabasesResponse,
    responseDeserialize: deserialize_tigrisdata_v1_ListDatabasesResponse,
  },
  // List all the collections present in the database passed in the request.
listCollections: {
    path: '/tigrisdata.v1.Tigris/ListCollections',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.ListCollectionsRequest,
    responseType: server_v1_api_pb.ListCollectionsResponse,
    requestSerialize: serialize_tigrisdata_v1_ListCollectionsRequest,
    requestDeserialize: deserialize_tigrisdata_v1_ListCollectionsRequest,
    responseSerialize: serialize_tigrisdata_v1_ListCollectionsResponse,
    responseDeserialize: deserialize_tigrisdata_v1_ListCollectionsResponse,
  },
  // Creates a new database. Returns an AlreadyExists error with a status code 409 if the database already exists.
createDatabase: {
    path: '/tigrisdata.v1.Tigris/CreateDatabase',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.CreateDatabaseRequest,
    responseType: server_v1_api_pb.CreateDatabaseResponse,
    requestSerialize: serialize_tigrisdata_v1_CreateDatabaseRequest,
    requestDeserialize: deserialize_tigrisdata_v1_CreateDatabaseRequest,
    responseSerialize: serialize_tigrisdata_v1_CreateDatabaseResponse,
    responseDeserialize: deserialize_tigrisdata_v1_CreateDatabaseResponse,
  },
  // Drop database deletes all the collections in this database along with all of the documents, and associated metadata for these collections.
dropDatabase: {
    path: '/tigrisdata.v1.Tigris/DropDatabase',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.DropDatabaseRequest,
    responseType: server_v1_api_pb.DropDatabaseResponse,
    requestSerialize: serialize_tigrisdata_v1_DropDatabaseRequest,
    requestDeserialize: deserialize_tigrisdata_v1_DropDatabaseRequest,
    responseSerialize: serialize_tigrisdata_v1_DropDatabaseResponse,
    responseDeserialize: deserialize_tigrisdata_v1_DropDatabaseResponse,
  },
  // This API returns information related to the database along with all the collections inside the database.
// This can be used to retrieve the size of the database or to retrieve schemas and the size of all the collections present in this database.
describeDatabase: {
    path: '/tigrisdata.v1.Tigris/DescribeDatabase',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.DescribeDatabaseRequest,
    responseType: server_v1_api_pb.DescribeDatabaseResponse,
    requestSerialize: serialize_tigrisdata_v1_DescribeDatabaseRequest,
    requestDeserialize: deserialize_tigrisdata_v1_DescribeDatabaseRequest,
    responseSerialize: serialize_tigrisdata_v1_DescribeDatabaseResponse,
    responseDeserialize: deserialize_tigrisdata_v1_DescribeDatabaseResponse,
  },
  // Returns the information related to the collection. This can be used to retrieve the schema or size of the collection.
describeCollection: {
    path: '/tigrisdata.v1.Tigris/DescribeCollection',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.DescribeCollectionRequest,
    responseType: server_v1_api_pb.DescribeCollectionResponse,
    requestSerialize: serialize_tigrisdata_v1_DescribeCollectionRequest,
    requestDeserialize: deserialize_tigrisdata_v1_DescribeCollectionRequest,
    responseSerialize: serialize_tigrisdata_v1_DescribeCollectionResponse,
    responseDeserialize: deserialize_tigrisdata_v1_DescribeCollectionResponse,
  },
  // Stream real-time events for mutations made to the collections in the database. Each stream will have a transaction
// identifier attached to it and will have a boolean flag “last” set to the last event of the transaction which will be useful
// if a transaction performed more than one operation in the collection.
events: {
    path: '/tigrisdata.v1.Tigris/Events',
    requestStream: false,
    responseStream: true,
    requestType: server_v1_api_pb.EventsRequest,
    responseType: server_v1_api_pb.EventsResponse,
    requestSerialize: serialize_tigrisdata_v1_EventsRequest,
    requestDeserialize: deserialize_tigrisdata_v1_EventsRequest,
    responseSerialize: serialize_tigrisdata_v1_EventsResponse,
    responseDeserialize: deserialize_tigrisdata_v1_EventsResponse,
  },
  // Provides the information about the server. This information includes returning the server version, etc.
getInfo: {
    path: '/tigrisdata.v1.Tigris/GetInfo',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.GetInfoRequest,
    responseType: server_v1_api_pb.GetInfoResponse,
    requestSerialize: serialize_tigrisdata_v1_GetInfoRequest,
    requestDeserialize: deserialize_tigrisdata_v1_GetInfoRequest,
    responseSerialize: serialize_tigrisdata_v1_GetInfoResponse,
    responseDeserialize: deserialize_tigrisdata_v1_GetInfoResponse,
  },
  // Publish API is use to publish messages to the collection.
publish: {
    path: '/tigrisdata.v1.Tigris/Publish',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.PublishRequest,
    responseType: server_v1_api_pb.PublishResponse,
    requestSerialize: serialize_tigrisdata_v1_PublishRequest,
    requestDeserialize: deserialize_tigrisdata_v1_PublishRequest,
    responseSerialize: serialize_tigrisdata_v1_PublishResponse,
    responseDeserialize: deserialize_tigrisdata_v1_PublishResponse,
  },
  // Subscribe is used to subscribe to the collection and receive messages from it.
subscribe: {
    path: '/tigrisdata.v1.Tigris/Subscribe',
    requestStream: false,
    responseStream: true,
    requestType: server_v1_api_pb.SubscribeRequest,
    responseType: server_v1_api_pb.SubscribeResponse,
    requestSerialize: serialize_tigrisdata_v1_SubscribeRequest,
    requestDeserialize: deserialize_tigrisdata_v1_SubscribeRequest,
    responseSerialize: serialize_tigrisdata_v1_SubscribeResponse,
    responseDeserialize: deserialize_tigrisdata_v1_SubscribeResponse,
  },
};

exports.TigrisClient = grpc.makeGenericClientConstructor(TigrisService);

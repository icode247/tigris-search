"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Topic = void 0;
const api_pb_1 = require("./proto/server/v1/api_pb");
const utility_1 = require("./utility");
class Topic {
    constructor(topicName, db, grpcClient) {
        this._topicName = topicName;
        this._db = db;
        this._grpcClient = grpcClient;
    }
    get topicName() {
        return this._topicName;
    }
    publishMany(_options, ...messages) {
        return new Promise((resolve, reject) => {
            const messagesArray = new Array();
            const textEncoder = new TextEncoder();
            for (const message of messages) {
                messagesArray.push(textEncoder.encode(utility_1.Utility.objToJsonString(message)));
            }
            const protoRequest = new api_pb_1.PublishRequest()
                .setDb(this._db)
                .setCollection(this._topicName)
                .setMessagesList(messagesArray);
            this._grpcClient.publish(protoRequest, (error, response) => {
                if (error !== undefined && error !== null) {
                    reject(error);
                }
                else {
                    let messageIndex = 0;
                    const clonedMessages = Object.assign([], messages);
                    for (const value of response.getKeysList_asU8()) {
                        const keyValueJsonObj = utility_1.Utility.jsonStringToObj(utility_1.Utility.uint8ArrayToString(value));
                        for (const fieldName of Object.keys(keyValueJsonObj)) {
                            Reflect.set(clonedMessages[messageIndex], fieldName, keyValueJsonObj[fieldName]);
                            messageIndex++;
                        }
                    }
                    resolve(clonedMessages);
                }
            });
        });
    }
    publish(message, options) {
        return new Promise((resolve, reject) => {
            this.publishMany(options, message).then(messages => {
                resolve(messages[0]);
            }).catch(error => {
                reject(error);
            });
        });
    }
    subscribe(callback) {
        const subscribeRequest = new api_pb_1.SubscribeRequest()
            .setDb(this._db)
            .setCollection(this._topicName);
        const stream = this._grpcClient.subscribe(subscribeRequest);
        stream.on("data", (subscribeResponse) => {
            const message = utility_1.Utility.jsonStringToObj(utility_1.Utility._base64Decode(subscribeResponse.getMessage_asB64()));
            callback.onNext(message);
        });
        stream.on("error", (error) => callback.onError(error));
        stream.on("end", () => callback.onEnd());
    }
}
exports.Topic = Topic;

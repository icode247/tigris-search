"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Collection = void 0;
const api_pb_1 = require("./proto/server/v1/api_pb");
const types_1 = require("./types");
const utility_1 = require("./utility");
const types_2 = require("./search/types");
class Collection {
    constructor(collectionName, db, grpcClient) {
        this._collectionName = collectionName;
        this._db = db;
        this._grpcClient = grpcClient;
    }
    get collectionName() {
        return this._collectionName;
    }
    insertMany(docs, tx, _options) {
        return new Promise((resolve, reject) => {
            const docsArray = new Array();
            for (const doc of docs) {
                docsArray.push(new TextEncoder().encode(utility_1.Utility.objToJsonString(doc)));
            }
            const protoRequest = new api_pb_1.InsertRequest()
                .setDb(this._db)
                .setCollection(this._collectionName)
                .setDocumentsList(docsArray);
            this._grpcClient.insert(protoRequest, utility_1.Utility.txToMetadata(tx), (error, response) => {
                if (error !== undefined && error !== null) {
                    reject(error);
                }
                else {
                    let docIndex = 0;
                    const clonedDocs = Object.assign([], docs);
                    for (const value of response.getKeysList_asU8()) {
                        const keyValueJsonObj = utility_1.Utility.jsonStringToObj(utility_1.Utility.uint8ArrayToString(value));
                        for (const fieldName of Object.keys(keyValueJsonObj)) {
                            Reflect.set(clonedDocs[docIndex], fieldName, keyValueJsonObj[fieldName]);
                            docIndex++;
                        }
                    }
                    resolve(clonedDocs);
                }
            });
        });
    }
    insert(doc, tx, options) {
        return new Promise((resolve, reject) => {
            const docArr = new Array();
            docArr.push(doc);
            this.insertMany(docArr, tx, options).then(docs => {
                resolve(docs[0]);
            }).catch(error => {
                reject(error);
            });
        });
    }
    insertOrReplaceMany(docs, tx, options) {
        return new Promise((resolve, reject) => {
            const docsArray = new Array();
            for (const doc of docs) {
                docsArray.push(new TextEncoder().encode(utility_1.Utility.objToJsonString(doc)));
            }
            const protoRequest = new api_pb_1.ReplaceRequest()
                .setDb(this._db)
                .setCollection(this._collectionName)
                .setDocumentsList(docsArray);
            this._grpcClient.replace(protoRequest, utility_1.Utility.txToMetadata(tx), (error, response) => {
                if (error !== undefined && error !== null) {
                    reject(error);
                }
                else {
                    let docIndex = 0;
                    const clonedDocs = Object.assign([], docs);
                    for (const value of response.getKeysList_asU8()) {
                        const keyValueJsonObj = utility_1.Utility.jsonStringToObj(utility_1.Utility.uint8ArrayToString(value));
                        for (const fieldName of Object.keys(keyValueJsonObj)) {
                            Reflect.set(clonedDocs[docIndex], fieldName, keyValueJsonObj[fieldName]);
                            docIndex++;
                        }
                    }
                    resolve(clonedDocs);
                }
            });
        });
    }
    insertOrReplace(doc, tx, options) {
        return new Promise((resolve, reject) => {
            const docArr = new Array();
            docArr.push(doc);
            this.insertOrReplaceMany(docArr, tx, options)
                .then(docs => resolve(docs[0]))
                .catch(error => reject(error));
        });
    }
    findOne(filter, tx, readFields) {
        return new Promise((resolve, reject) => {
            const readRequest = new api_pb_1.ReadRequest()
                .setDb(this._db)
                .setCollection(this._collectionName)
                .setOptions(new api_pb_1.ReadRequestOptions().setLimit(1))
                .setFilter(utility_1.Utility.stringToUint8Array(utility_1.Utility.filterToString(filter)));
            if (readFields) {
                readRequest.setFields(utility_1.Utility.stringToUint8Array(utility_1.Utility.readFieldString(readFields)));
            }
            const stream = this._grpcClient.read(readRequest, utility_1.Utility.txToMetadata(tx));
            stream.on("data", (readResponse) => {
                const doc = JSON.parse(utility_1.Utility._base64Decode(readResponse.getData_asB64()));
                resolve(doc);
            });
            stream.on("error", reject);
            stream.on("end", () => {
                /* eslint unicorn/no-useless-undefined: ["error", {"checkArguments": false}]*/
                resolve(undefined);
            });
        });
    }
    findMany(filter, readFields, tx, options) {
        return new Promise((resolve, reject) => {
            if (options === undefined) {
                options = new types_1.ReadRequestOptions();
            }
            const result = new Array();
            this.findManyStream(filter, {
                onEnd() {
                    resolve(result);
                },
                onNext(item) {
                    result.push(item);
                },
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                onError(_error) {
                    reject(_error);
                }
            }, readFields, tx, options);
        });
    }
    findManyStream(filter, reader, readFields, tx, options) {
        const readRequest = new api_pb_1.ReadRequest()
            .setDb(this._db)
            .setCollection(this._collectionName)
            .setFilter(utility_1.Utility.stringToUint8Array(utility_1.Utility.filterToString(filter)));
        if (readFields) {
            readRequest.setFields(utility_1.Utility.stringToUint8Array(utility_1.Utility.readFieldString(readFields)));
        }
        if (options !== undefined) {
            readRequest.setOptions(utility_1.Utility._readRequestOptionsToProtoReadRequestOptions(options));
        }
        const stream = this._grpcClient.read(readRequest, utility_1.Utility.txToMetadata(tx));
        stream.on("data", (readResponse) => {
            const doc = utility_1.Utility.jsonStringToObj(utility_1.Utility._base64Decode(readResponse.getData_asB64()));
            reader.onNext(doc);
        });
        stream.on("error", (error) => reader.onError(error));
        stream.on("end", () => reader.onEnd());
    }
    findAllStream(reader, readFields) {
        this.findManyStream({
            op: types_1.SelectorFilterOperator.NONE
        }, reader, readFields);
    }
    search(request, reader, options) {
        var _a;
        const searchRequest = new api_pb_1.SearchRequest()
            .setDb(this._db)
            .setCollection(this._collectionName)
            .setQ((_a = request.q) !== null && _a !== void 0 ? _a : types_2.MATCH_ALL_QUERY_STRING);
        if (request.searchFields !== undefined) {
            searchRequest.setSearchFieldsList(request.searchFields);
        }
        if (request.filter !== undefined) {
            searchRequest.setFilter(utility_1.Utility.stringToUint8Array(utility_1.Utility.filterToString(request.filter)));
        }
        if (request.facets !== undefined) {
            searchRequest.setFacet(utility_1.Utility.stringToUint8Array(utility_1.Utility.facetQueryToString(request.facets)));
        }
        if (request.sort !== undefined) {
            searchRequest.setSort(utility_1.Utility.stringToUint8Array(utility_1.Utility.sortOrderingToString(request.sort)));
        }
        if (request.includeFields !== undefined) {
            searchRequest.setIncludeFieldsList(request.includeFields);
        }
        if (request.excludeFields !== undefined) {
            searchRequest.setIncludeFieldsList(request.excludeFields);
        }
        if (options !== undefined) {
            searchRequest.setPage(options.page).setPageSize(options.perPage);
        }
        const stream = this._grpcClient.search(searchRequest);
        stream.on("data", (searchResponse) => {
            const searchResult = types_2.SearchResult.from(searchResponse);
            reader.onNext(searchResult);
        });
        stream.on("error", (error) => reader.onError(error));
        stream.on("end", () => reader.onEnd());
    }
    delete(filter, tx, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _options) {
        return new Promise((resolve, reject) => {
            if (!filter) {
                reject(new Error("No filter specified"));
            }
            const deleteRequest = new api_pb_1.DeleteRequest()
                .setDb(this._db)
                .setCollection(this._collectionName)
                .setFilter(utility_1.Utility.stringToUint8Array(utility_1.Utility.filterToString(filter)));
            this._grpcClient.delete(deleteRequest, utility_1.Utility.txToMetadata(tx), (error, response) => {
                if (error) {
                    reject(error);
                }
                else {
                    const metadata = new types_1.DMLMetadata(response.getMetadata().getCreatedAt(), response.getMetadata().getUpdatedAt());
                    resolve(new types_1.DeleteResponse(response.getStatus(), metadata));
                }
            });
        });
    }
    update(filter, fields, tx, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _options) {
        return new Promise((resolve, reject) => {
            const updateRequest = new api_pb_1.UpdateRequest()
                .setDb(this._db)
                .setCollection(this._collectionName)
                .setFilter(utility_1.Utility.stringToUint8Array(utility_1.Utility.filterToString(filter)))
                .setFields(utility_1.Utility.stringToUint8Array(utility_1.Utility.updateFieldsString(fields)));
            this._grpcClient.update(updateRequest, utility_1.Utility.txToMetadata(tx), (error, response) => {
                if (error) {
                    reject(error);
                }
                else {
                    const metadata = new types_1.DMLMetadata(response.getMetadata().getCreatedAt(), response.getMetadata().getUpdatedAt());
                    resolve(new types_1.UpdateResponse(response.getStatus(), metadata));
                }
            });
        });
    }
    events(events, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _options) {
        const eventsRequest = new api_pb_1.EventsRequest()
            .setDb(this._db)
            .setCollection(this._collectionName);
        const stream = this._grpcClient.events(eventsRequest);
        stream.on("data", (eventsResponse) => {
            const event = eventsResponse.getEvent();
            events.onNext(new types_1.StreamEvent(event.getTxId_asB64(), event.getCollection(), event.getOp(), utility_1.Utility.jsonStringToObj(utility_1.Utility._base64Decode(event.getData_asB64())), event.getLast()));
        });
        stream.on("error", (error) => events.onError(error));
        stream.on("end", () => events.onEnd());
    }
}
exports.Collection = Collection;
